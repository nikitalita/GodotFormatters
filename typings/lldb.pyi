from lldb_enums import *
from typing import Any, Callable, List, Tuple, Optional



# StateType enums:
eStateInvalid: int
eStateUnloaded: int
eStateConnected: int
eStateAttaching: int
eStateLaunching: int
eStateStopped: int
eStateRunning: int
eStateStepping: int
eStateCrashed: int
eStateDetached: int
eStateExited: int
eStateSuspended: int
kLastStateType: int

# LaunchFlags enums:
eLaunchFlagNone: int
eLaunchFlagExec: int
eLaunchFlagDebug: int
eLaunchFlagStopAtEntry: int
eLaunchFlagDisableASLR: int
eLaunchFlagDisableSTDIO: int
eLaunchFlagLaunchInTTY: int
eLaunchFlagLaunchInShell: int
eLaunchFlagLaunchInSeparateProcessGroup: int
eLaunchFlagDontSetExitStatus: int
eLaunchFlagDetachOnError: int
eLaunchFlagShellExpandArguments: int
eLaunchFlagCloseTTYOnExit: int
eLaunchFlagInheritTCCFromParent: int

# RunMode enums:
eOnlyThisThread: int
eAllThreads: int
eOnlyDuringStepping: int

# ByteOrder enums:
eByteOrderInvalid: int
eByteOrderBig: int
eByteOrderPDP: int
eByteOrderLittle: int

# Encoding enums:
eEncodingInvalid: int
eEncodingUint: int
eEncodingSint: int
eEncodingIEEE754: int
eEncodingVector: int

# Format enums:
eFormatDefault: int
eFormatInvalid: int
eFormatBoolean: int
eFormatBinary: int
eFormatBytes: int
eFormatBytesWithASCII: int
eFormatChar: int
eFormatCharPrintable: int
eFormatComplex: int
eFormatComplexFloat: int
eFormatCString: int
eFormatDecimal: int
eFormatEnum: int
eFormatHex: int
eFormatHexUppercase: int
eFormatFloat: int
eFormatOctal: int
eFormatOSType: int
eFormatUnicode16: int
eFormatUnicode32: int
eFormatUnsigned: int
eFormatPointer: int
eFormatVectorOfChar: int
eFormatVectorOfSInt8: int
eFormatVectorOfUInt8: int
eFormatVectorOfSInt16: int
eFormatVectorOfUInt16: int
eFormatVectorOfSInt32: int
eFormatVectorOfUInt32: int
eFormatVectorOfSInt64: int
eFormatVectorOfUInt64: int
eFormatVectorOfFloat16: int
eFormatVectorOfFloat32: int
eFormatVectorOfFloat64: int
eFormatVectorOfUInt128: int
eFormatComplexInteger: int
eFormatCharArray: int
eFormatAddressInfo: int
eFormatHexFloat: int
eFormatInstruction: int
eFormatVoid: int
eFormatUnicode8: int
kNumFormats: int

# DescriptionLevel enums:
eDescriptionLevelBrief: int
eDescriptionLevelFull: int
eDescriptionLevelVerbose: int
eDescriptionLevelInitial: int
kNumDescriptionLevels: int

# ScriptLanguage enums:
eScriptLanguageNone: int
eScriptLanguagePython: int
eScriptLanguageLua: int
eScriptLanguageUnknown: int
eScriptLanguageDefault: int

# RegisterKind enums:
eRegisterKindEHFrame: int
eRegisterKindDWARF: int
eRegisterKindGeneric: int
eRegisterKindProcessPlugin: int
eRegisterKindLLDB: int
kNumRegisterKinds: int

# StopReason enums:
eStopReasonInvalid: int
eStopReasonNone: int
eStopReasonTrace: int
eStopReasonBreakpoint: int
eStopReasonWatchpoint: int
eStopReasonSignal: int
eStopReasonException: int
eStopReasonExec: int
eStopReasonPlanComplete: int
eStopReasonThreadExiting: int
eStopReasonInstrumentation: int
eStopReasonProcessorTrace: int
eStopReasonFork: int
eStopReasonVFork: int
eStopReasonVForkDone: int

# ReturnStatus enums:
eReturnStatusInvalid: int
eReturnStatusSuccessFinishNoResult: int
eReturnStatusSuccessFinishResult: int
eReturnStatusSuccessContinuingNoResult: int
eReturnStatusSuccessContinuingResult: int
eReturnStatusStarted: int
eReturnStatusFailed: int
eReturnStatusQuit: int

# ExpressionResults enums:
eExpressionCompleted: int
eExpressionSetupError: int
eExpressionParseError: int
eExpressionDiscarded: int
eExpressionInterrupted: int
eExpressionHitBreakpoint: int
eExpressionTimedOut: int
eExpressionResultUnavailable: int
eExpressionStoppedForDebug: int
eExpressionThreadVanished: int
eSearchDepthInvalid: int

# SearchDepth enums:
eSearchDepthTarget: int
eSearchDepthModule: int
eSearchDepthCompUnit: int
eSearchDepthFunction: int
eSearchDepthBlock: int
eSearchDepthAddress: int
kLastSearchDepthKind: int

# ConnectionStatus enums:
eConnectionStatusSuccess: int
eConnectionStatusEndOfFile: int
eConnectionStatusError: int
eConnectionStatusTimedOut: int
eConnectionStatusNoConnection: int
eConnectionStatusLostConnection: int
eConnectionStatusInterrupted: int

# ErrorType enums:
eErrorTypeInvalid: int
eErrorTypeGeneric: int
eErrorTypeMachKernel: int
eErrorTypePOSIX: int
eErrorTypeExpression: int
eErrorTypeWin32: int

# ValueType enums:
eValueTypeInvalid: int
eValueTypeVariableGlobal: int
eValueTypeVariableStatic: int
eValueTypeVariableArgument: int
eValueTypeVariableLocal: int
eValueTypeRegister: int
eValueTypeRegisterSet: int
eValueTypeConstResult: int
eValueTypeVariableThreadLocal: int

# InputReaderGranularity enums:
eInputReaderGranularityInvalid: int
eInputReaderGranularityByte: int
eInputReaderGranularityWord: int
eInputReaderGranularityLine: int
eInputReaderGranularityAll: int

# SymbolContextItem enums:
eSymbolContextTarget: int
eSymbolContextModule: int
eSymbolContextCompUnit: int
eSymbolContextFunction: int
eSymbolContextBlock: int
eSymbolContextLineEntry: int
eSymbolContextSymbol: int
eSymbolContextEverything: int
eSymbolContextVariable: int
eSymbolContextLastItem: int

# Permissions enums:
ePermissionsWritable: int
ePermissionsReadable: int
ePermissionsExecutable: int

# InputReaderAction enums:
eInputReaderActivate: int
eInputReaderAsynchronousOutputWritten: int
eInputReaderReactivate: int
eInputReaderDeactivate: int
eInputReaderGotToken: int
eInputReaderInterrupt: int
eInputReaderEndOfFile: int
eInputReaderDone: int

# BreakpointEventType enums:
eBreakpointEventTypeInvalidType: int
eBreakpointEventTypeAdded: int
eBreakpointEventTypeRemoved: int
eBreakpointEventTypeLocationsAdded: int
eBreakpointEventTypeLocationsRemoved: int
eBreakpointEventTypeLocationsResolved: int
eBreakpointEventTypeEnabled: int
eBreakpointEventTypeDisabled: int
eBreakpointEventTypeCommandChanged: int
eBreakpointEventTypeConditionChanged: int
eBreakpointEventTypeIgnoreChanged: int
eBreakpointEventTypeThreadChanged: int
eBreakpointEventTypeAutoContinueChanged: int

# WatchpointEventType enums:
eWatchpointEventTypeInvalidType: int
eWatchpointEventTypeAdded: int
eWatchpointEventTypeRemoved: int
eWatchpointEventTypeEnabled: int
eWatchpointEventTypeDisabled: int
eWatchpointEventTypeCommandChanged: int
eWatchpointEventTypeConditionChanged: int
eWatchpointEventTypeIgnoreChanged: int
eWatchpointEventTypeThreadChanged: int
eWatchpointEventTypeTypeChanged: int

# WatchpointWriteType enums:

# LanguageType enums:
eLanguageTypeUnknown: int
eLanguageTypeC89: int
eLanguageTypeC: int
eLanguageTypeAda83: int
eLanguageTypeC_plus_plus: int
eLanguageTypeCobol74: int
eLanguageTypeCobol85: int
eLanguageTypeFortran77: int
eLanguageTypeFortran90: int
eLanguageTypePascal83: int
eLanguageTypeModula2: int
eLanguageTypeJava: int
eLanguageTypeC99: int
eLanguageTypeAda95: int
eLanguageTypeFortran95: int
eLanguageTypePLI: int
eLanguageTypeObjC: int
eLanguageTypeObjC_plus_plus: int
eLanguageTypeUPC: int
eLanguageTypeD: int
eLanguageTypePython: int
eLanguageTypeOpenCL: int
eLanguageTypeGo: int
eLanguageTypeModula3: int
eLanguageTypeHaskell: int
eLanguageTypeC_plus_plus_03: int
eLanguageTypeC_plus_plus_11: int
eLanguageTypeOCaml: int
eLanguageTypeRust: int
eLanguageTypeC11: int
eLanguageTypeSwift: int
eLanguageTypeJulia: int
eLanguageTypeDylan: int
eLanguageTypeC_plus_plus_14: int
eLanguageTypeFortran03: int
eLanguageTypeFortran08: int
eLanguageTypeRenderScript: int
eLanguageTypeBLISS: int
eLanguageTypeKotlin: int
eLanguageTypeZig: int
eLanguageTypeCrystal: int
eLanguageTypeC_plus_plus_17: int
eLanguageTypeC_plus_plus_20: int
eLanguageTypeC17: int
eLanguageTypeFortran18: int
eLanguageTypeAda2005: int
eLanguageTypeAda2012: int
eLanguageTypeHIP: int
eLanguageTypeAssembly: int
eLanguageTypeC_sharp: int
eLanguageTypeMojo: int
eLanguageTypeMipsAssembler: int
eNumLanguageTypes: int

# InstrumentationRuntimeType enums:
eInstrumentationRuntimeTypeAddressSanitizer: int
eInstrumentationRuntimeTypeThreadSanitizer: int
eInstrumentationRuntimeTypeUndefinedBehaviorSanitizer: int
eInstrumentationRuntimeTypeMainThreadChecker: int
eInstrumentationRuntimeTypeSwiftRuntimeReporting: int
eNumInstrumentationRuntimeTypes: int

# DynamicValueType enums:
eNoDynamicValues: int
eDynamicCanRunTarget: int
eDynamicDontRunTarget: int

# StopShowColumn enums:
eStopShowColumnAnsiOrCaret: int
eStopShowColumnAnsi: int
eStopShowColumnCaret: int
eStopShowColumnNone: int

# AccessType enums:
eAccessNone: int
eAccessPublic: int
eAccessPrivate: int
eAccessProtected: int
eAccessPackage: int

# CommandArgumentType enums:
eArgTypeAddress: int
eArgTypeAddressOrExpression: int
eArgTypeAliasName: int
eArgTypeAliasOptions: int
eArgTypeArchitecture: int
eArgTypeBoolean: int
eArgTypeBreakpointID: int
eArgTypeBreakpointIDRange: int
eArgTypeBreakpointName: int
eArgTypeByteSize: int
eArgTypeClassName: int
eArgTypeCommandName: int
eArgTypeCount: int
eArgTypeDescriptionVerbosity: int
eArgTypeDirectoryName: int
eArgTypeDisassemblyFlavor: int
eArgTypeEndAddress: int
eArgTypeExpression: int
eArgTypeExpressionPath: int
eArgTypeExprFormat: int
eArgTypeFileLineColumn: int
eArgTypeFilename: int
eArgTypeFormat: int
eArgTypeFrameIndex: int
eArgTypeFullName: int
eArgTypeFunctionName: int
eArgTypeFunctionOrSymbol: int
eArgTypeGDBFormat: int
eArgTypeHelpText: int
eArgTypeIndex: int
eArgTypeLanguage: int
eArgTypeLineNum: int
eArgTypeLogCategory: int
eArgTypeLogChannel: int
eArgTypeMethod: int
eArgTypeName: int
eArgTypeNewPathPrefix: int
eArgTypeNumLines: int
eArgTypeNumberPerLine: int
eArgTypeOffset: int
eArgTypeOldPathPrefix: int
eArgTypeOneLiner: int
eArgTypePath: int
eArgTypePermissionsNumber: int
eArgTypePermissionsString: int
eArgTypePid: int
eArgTypePlugin: int
eArgTypeProcessName: int
eArgTypePythonClass: int
eArgTypePythonFunction: int
eArgTypePythonScript: int
eArgTypeQueueName: int
eArgTypeRegisterName: int
eArgTypeRegularExpression: int
eArgTypeRunArgs: int
eArgTypeRunMode: int
eArgTypeScriptedCommandSynchronicity: int
eArgTypeScriptLang: int
eArgTypeSearchWord: int
eArgTypeSelector: int
eArgTypeSettingIndex: int
eArgTypeSettingKey: int
eArgTypeSettingPrefix: int
eArgTypeSettingVariableName: int
eArgTypeShlibName: int
eArgTypeSourceFile: int
eArgTypeSortOrder: int
eArgTypeStartAddress: int
eArgTypeSummaryString: int
eArgTypeSymbol: int
eArgTypeThreadID: int
eArgTypeThreadIndex: int
eArgTypeThreadName: int
eArgTypeTypeName: int
eArgTypeUnsignedInteger: int
eArgTypeUnixSignal: int
eArgTypeVarName: int
eArgTypeValue: int
eArgTypeWidth: int
eArgTypeNone: int
eArgTypePlatform: int
eArgTypeWatchpointID: int
eArgTypeWatchpointIDRange: int
eArgTypeWatchType: int
eArgRawInput: int
eArgTypeCommand: int
eArgTypeColumnNum: int
eArgTypeModuleUUID: int
eArgTypeSaveCoreStyle: int
eArgTypeLogHandler: int
eArgTypeSEDStylePair: int
eArgTypeRecognizerID: int
eArgTypeConnectURL: int
eArgTypeTargetID: int
eArgTypeStopHookID: int
eArgTypeCompletionType: int
eArgTypeLastArg: int

# SymbolType enums:
eSymbolTypeAny: int
eSymbolTypeInvalid: int
eSymbolTypeAbsolute: int
eSymbolTypeCode: int
eSymbolTypeResolver: int
eSymbolTypeData: int
eSymbolTypeTrampoline: int
eSymbolTypeRuntime: int
eSymbolTypeException: int
eSymbolTypeSourceFile: int
eSymbolTypeHeaderFile: int
eSymbolTypeObjectFile: int
eSymbolTypeCommonBlock: int
eSymbolTypeBlock: int
eSymbolTypeLocal: int
eSymbolTypeParam: int
eSymbolTypeVariable: int
eSymbolTypeVariableType: int
eSymbolTypeLineEntry: int
eSymbolTypeLineHeader: int
eSymbolTypeScopeBegin: int
eSymbolTypeScopeEnd: int
eSymbolTypeAdditional: int
eSymbolTypeCompiler: int
eSymbolTypeInstrumentation: int
eSymbolTypeUndefined: int
eSymbolTypeObjCClass: int
eSymbolTypeObjCMetaClass: int
eSymbolTypeObjCIVar: int
eSymbolTypeReExported: int

# SectionType enums:
eSectionTypeInvalid: int
eSectionTypeCode: int
eSectionTypeContainer: int
eSectionTypeData: int
eSectionTypeDataCString: int
eSectionTypeDataCStringPointers: int
eSectionTypeDataSymbolAddress: int
eSectionTypeData4: int
eSectionTypeData8: int
eSectionTypeData16: int
eSectionTypeDataPointers: int
eSectionTypeDebug: int
eSectionTypeZeroFill: int
eSectionTypeDataObjCMessageRefs: int
eSectionTypeDataObjCCFStrings: int
eSectionTypeDWARFDebugAbbrev: int
eSectionTypeDWARFDebugAddr: int
eSectionTypeDWARFDebugAranges: int
eSectionTypeDWARFDebugCuIndex: int
eSectionTypeDWARFDebugFrame: int
eSectionTypeDWARFDebugInfo: int
eSectionTypeDWARFDebugLine: int
eSectionTypeDWARFDebugLoc: int
eSectionTypeDWARFDebugMacInfo: int
eSectionTypeDWARFDebugMacro: int
eSectionTypeDWARFDebugPubNames: int
eSectionTypeDWARFDebugPubTypes: int
eSectionTypeDWARFDebugRanges: int
eSectionTypeDWARFDebugStr: int
eSectionTypeDWARFDebugStrOffsets: int
eSectionTypeDWARFAppleNames: int
eSectionTypeDWARFAppleTypes: int
eSectionTypeDWARFAppleNamespaces: int
eSectionTypeDWARFAppleObjC: int
eSectionTypeELFSymbolTable: int
eSectionTypeELFDynamicSymbols: int
eSectionTypeELFRelocationEntries: int
eSectionTypeELFDynamicLinkInfo: int
eSectionTypeEHFrame: int
eSectionTypeARMexidx: int
eSectionTypeARMextab: int
eSectionTypeCompactUnwind: int
eSectionTypeGoSymtab: int
eSectionTypeAbsoluteAddress: int
eSectionTypeDWARFGNUDebugAltLink: int
eSectionTypeDWARFDebugTypes: int
eSectionTypeDWARFDebugNames: int
eSectionTypeOther: int
eSectionTypeDWARFDebugLineStr: int
eSectionTypeDWARFDebugRngLists: int
eSectionTypeDWARFDebugLocLists: int
eSectionTypeDWARFDebugAbbrevDwo: int
eSectionTypeDWARFDebugInfoDwo: int
eSectionTypeDWARFDebugStrDwo: int
eSectionTypeDWARFDebugStrOffsetsDwo: int
eSectionTypeDWARFDebugTypesDwo: int
eSectionTypeDWARFDebugRngListsDwo: int
eSectionTypeDWARFDebugLocDwo: int
eSectionTypeDWARFDebugLocListsDwo: int
eSectionTypeDWARFDebugTuIndex: int
eSectionTypeCTF: int

# EmulateInstructionOptions enums:
eEmulateInstructionOptionNone: int
eEmulateInstructionOptionAutoAdvancePC: int
eEmulateInstructionOptionIgnoreConditions: int

# FunctionNameType enums:
eFunctionNameTypeNone: int
eFunctionNameTypeAuto: int
eFunctionNameTypeFull: int
eFunctionNameTypeBase: int
eFunctionNameTypeMethod: int
eFunctionNameTypeSelector: int
eFunctionNameTypeAny: int

# BasicType enums:
eBasicTypeInvalid: int
eBasicTypeVoid: int
eBasicTypeChar: int
eBasicTypeSignedChar: int
eBasicTypeUnsignedChar: int
eBasicTypeWChar: int
eBasicTypeSignedWChar: int
eBasicTypeUnsignedWChar: int
eBasicTypeChar16: int
eBasicTypeChar32: int
eBasicTypeChar8: int
eBasicTypeShort: int
eBasicTypeUnsignedShort: int
eBasicTypeInt: int
eBasicTypeUnsignedInt: int
eBasicTypeLong: int
eBasicTypeUnsignedLong: int
eBasicTypeLongLong: int
eBasicTypeUnsignedLongLong: int
eBasicTypeInt128: int
eBasicTypeUnsignedInt128: int
eBasicTypeBool: int
eBasicTypeHalf: int
eBasicTypeFloat: int
eBasicTypeDouble: int
eBasicTypeLongDouble: int
eBasicTypeFloatComplex: int
eBasicTypeDoubleComplex: int
eBasicTypeLongDoubleComplex: int
eBasicTypeObjCID: int
eBasicTypeObjCClass: int
eBasicTypeObjCSel: int
eBasicTypeNullPtr: int
eBasicTypeOther: int

# TraceType enums:
eTraceTypeNone: int
eTraceTypeProcessorTrace: int

# StructuredDataType enums:
eStructuredDataTypeInvalid: int
eStructuredDataTypeNull: int
eStructuredDataTypeGeneric: int
eStructuredDataTypeArray: int
eStructuredDataTypeInteger: int
eStructuredDataTypeFloat: int
eStructuredDataTypeBoolean: int
eStructuredDataTypeString: int
eStructuredDataTypeDictionary: int
eStructuredDataTypeSignedInteger: int
eStructuredDataTypeUnsignedInteger: int

# TypeClass enums:
eTypeClassInvalid: int
eTypeClassArray: int
eTypeClassBlockPointer: int
eTypeClassBuiltin: int
eTypeClassClass: int
eTypeClassComplexFloat: int
eTypeClassComplexInteger: int
eTypeClassEnumeration: int
eTypeClassFunction: int
eTypeClassMemberPointer: int
eTypeClassObjCObject: int
eTypeClassObjCInterface: int
eTypeClassObjCObjectPointer: int
eTypeClassPointer: int
eTypeClassReference: int
eTypeClassStruct: int
eTypeClassTypedef: int
eTypeClassUnion: int
eTypeClassVector: int
eTypeClassOther: int
eTypeClassAny: int

# TemplateArgumentKind enums:
eTemplateArgumentKindNull: int
eTemplateArgumentKindType: int
eTemplateArgumentKindDeclaration: int
eTemplateArgumentKindIntegral: int
eTemplateArgumentKindTemplate: int
eTemplateArgumentKindTemplateExpansion: int
eTemplateArgumentKindExpression: int
eTemplateArgumentKindPack: int
eTemplateArgumentKindNullPtr: int

# FormatterMatchType enums:
eFormatterMatchExact: int
eFormatterMatchRegex: int
eFormatterMatchCallback: int
eLastFormatterMatchType: int

# TypeOptions enums:
eTypeOptionNone: int
eTypeOptionCascade: int
eTypeOptionSkipPointers: int
eTypeOptionSkipReferences: int
eTypeOptionHideChildren: int
eTypeOptionHideValue: int
eTypeOptionShowOneLiner: int
eTypeOptionHideNames: int
eTypeOptionNonCacheable: int
eTypeOptionHideEmptyAggregates: int
eTypeOptionFrontEndWantsDereference: int

# FrameComparison enums:
eFrameCompareInvalid: int
eFrameCompareUnknown: int
eFrameCompareEqual: int
eFrameCompareSameParent: int
eFrameCompareYounger: int
eFrameCompareOlder: int

# FilePermissions enums:
eFilePermissionsUserRead: int
eFilePermissionsUserWrite: int
eFilePermissionsUserExecute: int
eFilePermissionsGroupRead: int
eFilePermissionsGroupWrite: int
eFilePermissionsGroupExecute: int
eFilePermissionsWorldRead: int
eFilePermissionsWorldWrite: int
eFilePermissionsWorldExecute: int
eFilePermissionsUserRW: int
eFileFilePermissionsUserRX: int
eFilePermissionsUserRWX: int
eFilePermissionsGroupRW: int
eFilePermissionsGroupRX: int
eFilePermissionsGroupRWX: int
eFilePermissionsWorldRW: int
eFilePermissionsWorldRX: int
eFilePermissionsWorldRWX: int
eFilePermissionsEveryoneR: int
eFilePermissionsEveryoneW: int
eFilePermissionsEveryoneX: int
eFilePermissionsEveryoneRW: int
eFilePermissionsEveryoneRX: int
eFilePermissionsEveryoneRWX: int
eFilePermissionsFileDefault: int
eFilePermissionsDirectoryDefault: int

# QueueItemKind enums:
eQueueItemKindUnknown: int
eQueueItemKindFunction: int
eQueueItemKindBlock: int

# QueueKind enums:
eQueueKindUnknown: int
eQueueKindSerial: int
eQueueKindConcurrent: int

# ExpressionEvaluationPhase enums:
eExpressionEvaluationParse: int
eExpressionEvaluationIRGen: int
eExpressionEvaluationExecution: int
eExpressionEvaluationComplete: int

# InstructionControlFlowKind enums:
eInstructionControlFlowKindUnknown: int
eInstructionControlFlowKindOther: int
eInstructionControlFlowKindCall: int
eInstructionControlFlowKindReturn: int
eInstructionControlFlowKindJump: int
eInstructionControlFlowKindCondJump: int
eInstructionControlFlowKindFarCall: int
eInstructionControlFlowKindFarReturn: int
eInstructionControlFlowKindFarJump: int

# WatchpointKind enums:
eWatchpointKindWrite: int
eWatchpointKindRead: int

# GdbSignal enums:
eGdbSignalBadAccess: int
eGdbSignalBadInstruction: int
eGdbSignalArithmetic: int
eGdbSignalEmulation: int
eGdbSignalSoftware: int
eGdbSignalBreakpoint: int

# PathType enums:
ePathTypeLLDBShlibDir: int
ePathTypeSupportExecutableDir: int
ePathTypeHeaderDir: int
ePathTypePythonDir: int
ePathTypeLLDBSystemPlugins: int
ePathTypeLLDBUserPlugins: int
ePathTypeLLDBTempSystemDir: int
ePathTypeGlobalLLDBTempSystemDir: int
ePathTypeClangDir: int

# MemberFunctionKind enums:
eMemberFunctionKindUnknown: int
eMemberFunctionKindConstructor: int
eMemberFunctionKindDestructor: int
eMemberFunctionKindInstanceMethod: int
eMemberFunctionKindStaticMethod: int

# MatchType enums:
eMatchTypeNormal: int
eMatchTypeRegex: int
eMatchTypeStartsWith: int

# TypeFlags enums:
eTypeHasChildren: int
eTypeHasValue: int
eTypeIsArray: int
eTypeIsBlock: int
eTypeIsBuiltIn: int
eTypeIsClass: int
eTypeIsCPlusPlus: int
eTypeIsEnumeration: int
eTypeIsFuncPrototype: int
eTypeIsMember: int
eTypeIsObjC: int
eTypeIsPointer: int
eTypeIsReference: int
eTypeIsStructUnion: int
eTypeIsTemplate: int
eTypeIsTypedef: int
eTypeIsVector: int
eTypeIsScalar: int
eTypeIsInteger: int
eTypeIsFloat: int
eTypeIsComplex: int
eTypeIsSigned: int
eTypeInstanceIsPointer: int

# CommandFlags enums:
eCommandRequiresTarget: int
eCommandRequiresProcess: int
eCommandRequiresThread: int
eCommandRequiresFrame: int
eCommandRequiresRegContext: int
eCommandTryTargetAPILock: int
eCommandProcessMustBeLaunched: int
eCommandProcessMustBePaused: int
eCommandProcessMustBeTraced: int

# TypeSummaryCapping enums:
eTypeSummaryCapped: int
eTypeSummaryUncapped: int

# CommandInterpreterResult enums:
eCommandInterpreterResultSuccess: int
eCommandInterpreterResultInferiorCrash: int
eCommandInterpreterResultCommandError: int
eCommandInterpreterResultQuitRequested: int

# SaveCoreStyle enums:
eSaveCoreUnspecified: int
eSaveCoreFull: int
eSaveCoreDirtyOnly: int
eSaveCoreStackOnly: int

# TraceEvent enums:
eTraceEventDisabledSW: int
eTraceEventDisabledHW: int
eTraceEventCPUChanged: int
eTraceEventHWClockTick: int
eTraceEventSyncPoint: int

# TraceItemKind enums:
eTraceItemKindError: int
eTraceItemKindEvent: int
eTraceItemKindInstruction: int

# TraceCursorSeekType enums:
eTraceCursorSeekTypeBeginning: int
eTraceCursorSeekTypeCurrent: int
eTraceCursorSeekTypeEnd: int

# DWIMPrintVerbosity enums:
eDWIMPrintVerbosityNone: int
eDWIMPrintVerbosityExpression: int
eDWIMPrintVerbosityFull: int

# WatchpointValueKind enums:
eWatchPointValueKindInvalid: int
eWatchPointValueKindVariable: int
eWatchPointValueKindExpression: int

# CompletionType enums:
eNoCompletion: int
eSourceFileCompletion: int
eDiskFileCompletion: int
eDiskDirectoryCompletion: int
eSymbolCompletion: int
eModuleCompletion: int
eSettingsNameCompletion: int
ePlatformPluginCompletion: int
eArchitectureCompletion: int
eVariablePathCompletion: int
eRegisterCompletion: int
eBreakpointCompletion: int
eProcessPluginCompletion: int
eDisassemblyFlavorCompletion: int
eTypeLanguageCompletion: int
eFrameIndexCompletion: int
eModuleUUIDCompletion: int
eStopHookIDCompletion: int
eThreadIndexCompletion: int
eWatchpointIDCompletion: int
eBreakpointNameCompletion: int
eProcessIDCompletion: int
eProcessNameCompletion: int
eRemoteDiskFileCompletion: int
eRemoteDiskDirectoryCompletion: int
eTypeCategoryNameCompletion: int
eCustomCompletion: int

SBPlatformLocateModuleCallback = Callable[[Any, SBModuleSpec, SBFileSpec, SBFileSpec], SBError]

LogOutputCallback = Callable[[str, Any], None]

SBDebuggerDestroyCallback = Callable[[int, Any], None]

class ScriptObjectPtr(object):
    pass

class FileSP(object):
    pass

def _swig_add_metaclass(metaclass): ...
def _swig_repr(self): ...
def _swig_setattr_nondynamic_class_variable(set): ...
def _swig_setattr_nondynamic_instance_variable(set): ...
def command(command_name, doc): ...
def in_range(symbol, section): ...
def is_numeric_type(basic_type): ...
def lldb_iter(obj, getsize, getelem): ...




class SBAddress(object):
    def Clear(self: SBAddress): ...
    def GetBlock(self: SBAddress) -> SBBlock: ...
    def GetCompileUnit(self: SBAddress) -> SBCompileUnit: ...
    def GetDescription(self: SBAddress, description: SBStream) -> bool: ...
    def GetFileAddress(self: SBAddress) -> int: ...
    def GetFunction(self: SBAddress) -> SBFunction: ...
    def GetLineEntry(self: SBAddress) -> SBLineEntry: ...
    def GetLoadAddress(self: SBAddress, target: SBTarget) -> int: ...
    def GetModule(self: SBAddress) -> SBModule: ...
    def GetOffset(self: SBAddress) -> int: ...
    def GetSection(self: SBAddress) -> SBSection: ...
    def GetSymbol(self: SBAddress) -> SBSymbol: ...
    def GetSymbolContext(self: SBAddress, resolve_scope: int) -> SBSymbolContext: ...
    def IsValid(self: SBAddress) -> bool: ...
    def OffsetAddress(self: SBAddress, offset: int) -> bool: ...
    def SetAddress(self: SBAddress, section: SBSection, offset: int): ...
    def SetLoadAddress(self: SBAddress, load_addr: int, target: SBTarget): ...
    def __bool__(self): ...
    def __eq__(self, other): ...
    def __get_load_addr_property__(self): ...
    def __hex__(self): ...
    def __init__(self, *args) -> SBAddress: ...
    def __int__(self): ...
    def __ne__(self: SBAddress, rhs: SBAddress) -> bool: ...
    def __nonzero__(self): ...
    def __oct__(self): ...
    def __repr__(self: SBAddress) -> str: ...
    def __set_load_addr_property__(self, load_addr): ...
    @property
    def block(self) -> SBBlock: ...
    @property
    def compile_unit(self) -> SBCompileUnit: ...
    @property
    def file_addr(self) -> int: ...
    @property
    def function(self) -> SBFunction: ...
    @property
    def line_entry(self) -> SBLineEntry: ...
    @property
    def load_addr(self): ...
    @load_addr.setter
    def load_addr(self, value): ...
    @property
    def module(self) -> SBModule: ...
    @property
    def offset(self) -> int: ...
    @property
    def section(self) -> SBSection: ...
    @property
    def symbol(self) -> SBSymbol: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBAttachInfo(object):
    def EffectiveGroupIDIsValid(self: SBAttachInfo) -> bool: ...
    def EffectiveUserIDIsValid(self: SBAttachInfo) -> bool: ...
    def GetEffectiveGroupID(self: SBAttachInfo) -> int: ...
    def GetEffectiveUserID(self: SBAttachInfo) -> int: ...
    def GetGroupID(self: SBAttachInfo) -> int: ...
    def GetIgnoreExisting(self: SBAttachInfo) -> bool: ...
    def GetListener(self: SBAttachInfo) -> SBListener: ...
    def GetParentProcessID(self: SBAttachInfo) -> int: ...
    def GetProcessID(self: SBAttachInfo) -> int: ...
    def GetProcessPluginName(self: SBAttachInfo) -> str: ...
    def GetResumeCount(self: SBAttachInfo) -> int: ...
    def GetScriptedProcessClassName(self: SBAttachInfo) -> str: ...
    def GetScriptedProcessDictionary(self: SBAttachInfo) -> SBStructuredData: ...
    def GetShadowListener(self: SBAttachInfo) -> SBListener: ...
    def GetUserID(self: SBAttachInfo) -> int: ...
    def GetWaitForLaunch(self: SBAttachInfo) -> bool: ...
    def GroupIDIsValid(self: SBAttachInfo) -> bool: ...
    def ParentProcessIDIsValid(self: SBAttachInfo) -> bool: ...
    def SetEffectiveGroupID(self: SBAttachInfo, gid: int): ...
    def SetEffectiveUserID(self: SBAttachInfo, uid: int): ...
    def SetExecutable(self, *args): ...
    def SetGroupID(self: SBAttachInfo, gid: int): ...
    def SetIgnoreExisting(self: SBAttachInfo, b: bool): ...
    def SetListener(self: SBAttachInfo, listener: SBListener): ...
    def SetParentProcessID(self: SBAttachInfo, pid: int): ...
    def SetProcessID(self: SBAttachInfo, pid: int): ...
    def SetProcessPluginName(self: SBAttachInfo, plugin_name: str): ...
    def SetResumeCount(self: SBAttachInfo, c: int): ...
    def SetScriptedProcessClassName(self: SBAttachInfo, class_name: str): ...
    def SetScriptedProcessDictionary(self: SBAttachInfo, dict: SBStructuredData): ...
    def SetShadowListener(self: SBAttachInfo, listener: SBListener): ...
    def SetUserID(self: SBAttachInfo, uid: int): ...
    def SetWaitForLaunch(self, *args): ...
    def UserIDIsValid(self: SBAttachInfo) -> bool: ...
    def __init__(self, *args) -> SBAttachInfo: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBBlock(object):
    class ranges_access(object):
        def __getitem__(self, key): ...
        def __init__(self, sbblock): ...
        def __len__(self): ...
    def GetContainingInlinedBlock(self: SBBlock) -> SBBlock: ...
    def GetDescription(self: SBBlock, description: SBStream) -> bool: ...
    def GetFirstChild(self: SBBlock) -> SBBlock: ...
    def GetInlinedCallSiteColumn(self: SBBlock) -> int: ...
    def GetInlinedCallSiteFile(self: SBBlock) -> SBFileSpec: ...
    def GetInlinedCallSiteLine(self: SBBlock) -> int: ...
    def GetInlinedName(self: SBBlock) -> str: ...
    def GetNumRanges(self: SBBlock) -> int: ...
    def GetParent(self: SBBlock) -> SBBlock: ...
    def GetRangeEndAddress(self: SBBlock, idx: int) -> SBAddress: ...
    def GetRangeIndexForBlockAddress(self: SBBlock, block_addr: SBAddress) -> int: ...
    def GetRangeStartAddress(self: SBBlock, idx: int) -> SBAddress: ...
    def GetSibling(self: SBBlock) -> SBBlock: ...
    def GetVariables(self, *args) -> SBValueList: ...
    def IsInlined(self: SBBlock) -> bool: ...
    def IsValid(self: SBBlock) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBBlock: ...
    def __nonzero__(self): ...
    def __repr__(self: SBBlock) -> str: ...
    def get_call_site(self): ...
    def get_range_at_index(self, idx): ...
    def get_ranges_access_object(self): ...
    def get_ranges_array(self): ...
    @property
    def call_site(self): ...
    @property
    def first_child(self) -> SBBlock: ...
    @property
    def inlined_block(self) -> SBBlock: ...
    @property
    def name(self) -> str: ...
    @property
    def num_ranges(self) -> int: ...
    @property
    def parent(self) -> SBBlock: ...
    @property
    def range(self): ...
    @property
    def ranges(self): ...
    @property
    def sibling(self) -> SBBlock: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBBreakpoint(object):
    class locations_access(object):
        def __getitem__(self, key): ...
        def __init__(self, sbbreakpoint): ...
        def __len__(self): ...
    def AddLocation(self: SBBreakpoint, address: SBAddress) -> SBError: ...
    def AddName(self: SBBreakpoint, new_name: str) -> bool: ...
    def AddNameWithErrorHandling(self: SBBreakpoint, new_name: str) -> SBError: ...
    def ClearAllBreakpointSites(self: SBBreakpoint): ...
    @staticmethod
    def EventIsBreakpointEvent(event: SBEvent) -> bool: ...
    def FindLocationByAddress(self: SBBreakpoint, vm_addr: int) -> SBBreakpointLocation: ...
    def FindLocationByID(self: SBBreakpoint, bp_loc_id: int) -> SBBreakpointLocation: ...
    def FindLocationIDByAddress(self: SBBreakpoint, vm_addr: int) -> int: ...
    def GetAutoContinue(self: SBBreakpoint) -> bool: ...
    @staticmethod
    def GetBreakpointEventTypeFromEvent(event: SBEvent) -> int: ...
    @staticmethod
    def GetBreakpointFromEvent(event: SBEvent) -> SBBreakpoint: ...
    @staticmethod
    def GetBreakpointLocationAtIndexFromEvent(event: SBEvent, loc_idx: int) -> SBBreakpointLocation: ...
    def GetCommandLineCommands(self: SBBreakpoint, commands: SBStringList) -> bool: ...
    def GetCondition(self: SBBreakpoint) -> str: ...
    def GetDescription(self, *args) -> bool: ...
    def GetHitCount(self: SBBreakpoint) -> int: ...
    def GetID(self: SBBreakpoint) -> int: ...
    def GetIgnoreCount(self: SBBreakpoint) -> int: ...
    def GetLocationAtIndex(self: SBBreakpoint, index: int) -> SBBreakpointLocation: ...
    def GetNames(self: SBBreakpoint, names: SBStringList): ...
    @staticmethod
    def GetNumBreakpointLocationsFromEvent(event_sp: SBEvent) -> int: ...
    def GetNumLocations(self: SBBreakpoint) -> int: ...
    def GetNumResolvedLocations(self: SBBreakpoint) -> int: ...
    def GetQueueName(self: SBBreakpoint) -> str: ...
    def GetTarget(self: SBBreakpoint) -> SBTarget: ...
    def GetThreadID(self: SBBreakpoint) -> int: ...
    def GetThreadIndex(self: SBBreakpoint) -> int: ...
    def GetThreadName(self: SBBreakpoint) -> str: ...
    def IsEnabled(self: SBBreakpoint) -> bool: ...
    def IsHardware(self: SBBreakpoint) -> bool: ...
    def IsInternal(self: SBBreakpoint) -> bool: ...
    def IsOneShot(self: SBBreakpoint) -> bool: ...
    def IsValid(self: SBBreakpoint) -> bool: ...
    def MatchesName(self: SBBreakpoint, name: str) -> bool: ...
    def RemoveName(self: SBBreakpoint, name_to_remove: str): ...
    def SerializeToStructuredData(self: SBBreakpoint) -> SBStructuredData: ...
    def SetAutoContinue(self: SBBreakpoint, auto_continue: bool): ...
    def SetCommandLineCommands(self: SBBreakpoint, commands: SBStringList): ...
    def SetCondition(self: SBBreakpoint, condition: str): ...
    def SetEnabled(self: SBBreakpoint, enable: bool): ...
    def SetIgnoreCount(self: SBBreakpoint, count: int): ...
    def SetOneShot(self: SBBreakpoint, one_shot: bool): ...
    def SetQueueName(self: SBBreakpoint, queue_name: str): ...
    def SetScriptCallbackBody(self: SBBreakpoint, script_body_text: str) -> SBError: ...
    def SetScriptCallbackFunction(self, *args): ...
    def SetThreadID(self: SBBreakpoint, sb_thread_id: int): ...
    def SetThreadIndex(self: SBBreakpoint, index: int): ...
    def SetThreadName(self: SBBreakpoint, thread_name: str): ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBBreakpoint: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBBreakpoint) -> str: ...
    def get_breakpoint_location_list(self): ...
    def get_locations_access_object(self): ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value:bool): ...
    @property
    def id(self) -> int: ...
    @property
    def location(self): ...
    @property
    def locations(self): ...
    @property
    def num_locations(self) -> int: ...
    @property
    def one_shot(self) -> bool: ...
    @one_shot.setter
    def one_shot(self, value:bool): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBBreakpointList(object):
    def Append(self: SBBreakpointList, sb_bkpt: SBBreakpoint): ...
    def AppendByID(self: SBBreakpointList, id: int): ...
    def AppendIfUnique(self: SBBreakpointList, sb_bkpt: SBBreakpoint) -> bool: ...
    def Clear(self: SBBreakpointList): ...
    def FindBreakpointByID(self: SBBreakpointList, arg2: int) -> SBBreakpoint: ...
    def GetBreakpointAtIndex(self: SBBreakpointList, idx: int) -> SBBreakpoint: ...
    def GetSize(self: SBBreakpointList) -> int: ...
    def __init__(self: SBBreakpointList, target: SBTarget) -> SBBreakpointList: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBBreakpointLocation(object):
    def GetAddress(self: SBBreakpointLocation) -> SBAddress: ...
    def GetAutoContinue(self: SBBreakpointLocation) -> bool: ...
    def GetBreakpoint(self: SBBreakpointLocation) -> SBBreakpoint: ...
    def GetCommandLineCommands(self: SBBreakpointLocation, commands: SBStringList) -> bool: ...
    def GetCondition(self: SBBreakpointLocation) -> str: ...
    def GetDescription(self: SBBreakpointLocation, description: SBStream, level: int) -> bool: ...
    def GetHitCount(self: SBBreakpointLocation) -> int: ...
    def GetID(self: SBBreakpointLocation) -> int: ...
    def GetIgnoreCount(self: SBBreakpointLocation) -> int: ...
    def GetLoadAddress(self: SBBreakpointLocation) -> int: ...
    def GetQueueName(self: SBBreakpointLocation) -> str: ...
    def GetThreadID(self: SBBreakpointLocation) -> int: ...
    def GetThreadIndex(self: SBBreakpointLocation) -> int: ...
    def GetThreadName(self: SBBreakpointLocation) -> str: ...
    def IsEnabled(self: SBBreakpointLocation) -> bool: ...
    def IsResolved(self: SBBreakpointLocation) -> bool: ...
    def IsValid(self: SBBreakpointLocation) -> bool: ...
    def SetAutoContinue(self: SBBreakpointLocation, auto_continue: bool): ...
    def SetCommandLineCommands(self: SBBreakpointLocation, commands: SBStringList): ...
    def SetCondition(self: SBBreakpointLocation, condition: str): ...
    def SetEnabled(self: SBBreakpointLocation, enabled: bool): ...
    def SetIgnoreCount(self: SBBreakpointLocation, n: int): ...
    def SetQueueName(self: SBBreakpointLocation, queue_name: str): ...
    def SetScriptCallbackBody(self: SBBreakpointLocation, script_body_text: str) -> SBError: ...
    def SetScriptCallbackFunction(self, *args): ...
    def SetThreadID(self: SBBreakpointLocation, sb_thread_id: int): ...
    def SetThreadIndex(self: SBBreakpointLocation, index: int): ...
    def SetThreadName(self: SBBreakpointLocation, thread_name: str): ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBBreakpointLocation: ...
    def __nonzero__(self): ...
    def __repr__(self: SBBreakpointLocation) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBBreakpointName(object):
    def GetAllowDelete(self: SBBreakpointName) -> bool: ...
    def GetAllowDisable(self: SBBreakpointName) -> bool: ...
    def GetAllowList(self: SBBreakpointName) -> bool: ...
    def GetAutoContinue(self: SBBreakpointName) -> bool: ...
    def GetCommandLineCommands(self: SBBreakpointName, commands: SBStringList) -> bool: ...
    def GetCondition(self: SBBreakpointName) -> str: ...
    def GetDescription(self: SBBreakpointName, description: SBStream) -> bool: ...
    def GetHelpString(self: SBBreakpointName) -> str: ...
    def GetIgnoreCount(self: SBBreakpointName) -> int: ...
    def GetName(self: SBBreakpointName) -> str: ...
    def GetQueueName(self: SBBreakpointName) -> str: ...
    def GetThreadID(self: SBBreakpointName) -> int: ...
    def GetThreadIndex(self: SBBreakpointName) -> int: ...
    def GetThreadName(self: SBBreakpointName) -> str: ...
    def IsEnabled(self: SBBreakpointName) -> bool: ...
    def IsOneShot(self: SBBreakpointName) -> bool: ...
    def IsValid(self: SBBreakpointName) -> bool: ...
    def SetAllowDelete(self: SBBreakpointName, value: bool): ...
    def SetAllowDisable(self: SBBreakpointName, value: bool): ...
    def SetAllowList(self: SBBreakpointName, value: bool): ...
    def SetAutoContinue(self: SBBreakpointName, auto_continue: bool): ...
    def SetCommandLineCommands(self: SBBreakpointName, commands: SBStringList): ...
    def SetCondition(self: SBBreakpointName, condition: str): ...
    def SetEnabled(self: SBBreakpointName, enable: bool): ...
    def SetHelpString(self: SBBreakpointName, help_string: str): ...
    def SetIgnoreCount(self: SBBreakpointName, count: int): ...
    def SetOneShot(self: SBBreakpointName, one_shot: bool): ...
    def SetQueueName(self: SBBreakpointName, queue_name: str): ...
    def SetScriptCallbackBody(self: SBBreakpointName, script_body_text: str) -> SBError: ...
    def SetScriptCallbackFunction(self, *args): ...
    def SetThreadID(self: SBBreakpointName, sb_thread_id: int): ...
    def SetThreadIndex(self: SBBreakpointName, index: int): ...
    def SetThreadName(self: SBBreakpointName, thread_name: str): ...
    def __bool__(self): ...
    def __eq__(self: SBBreakpointName, rhs: SBBreakpointName) -> bool: ...
    def __init__(self, *args) -> SBBreakpointName: ...
    def __ne__(self: SBBreakpointName, rhs: SBBreakpointName) -> bool: ...
    def __nonzero__(self): ...
    def __repr__(self: SBBreakpointName) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBBroadcaster(object):
    def AddInitialEventsToListener(self: SBBroadcaster, listener: SBListener, requested_events: int): ...
    def AddListener(self: SBBroadcaster, listener: SBListener, event_mask: int) -> int: ...
    def BroadcastEvent(self: SBBroadcaster, event: SBEvent, unique: bool = False): ...
    def BroadcastEventByType(self: SBBroadcaster, event_type: int, unique: bool = False): ...
    def Clear(self: SBBroadcaster): ...
    def EventTypeHasListeners(self: SBBroadcaster, event_type: int) -> bool: ...
    def GetName(self: SBBroadcaster) -> str: ...
    def IsValid(self: SBBroadcaster) -> bool: ...
    def RemoveListener(self: SBBroadcaster, listener: SBListener, event_mask: int = 4294967295) -> bool: ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBBroadcaster: ...
    def __lt__(self: SBBroadcaster, rhs: SBBroadcaster) -> bool: ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBCommandInterpreter(object):
    def AliasExists(self: SBCommandInterpreter, cmd: str) -> bool: ...
    def AllowExitCodeOnQuit(self: SBCommandInterpreter, allow: bool): ...
    def CommandExists(self: SBCommandInterpreter, cmd: str) -> bool: ...
    @staticmethod
    def EventIsCommandInterpreterEvent(event: SBEvent) -> bool: ...
    @staticmethod
    def GetArgumentDescriptionAsCString(arg_type: int) -> str: ...
    @staticmethod
    def GetArgumentTypeAsCString(arg_type: int) -> str: ...
    def GetBroadcaster(self: SBCommandInterpreter) -> SBBroadcaster: ...
    @staticmethod
    def GetBroadcasterClass() -> str: ...
    def GetDebugger(self: SBCommandInterpreter) -> SBDebugger: ...
    def GetIOHandlerControlSequence(self: SBCommandInterpreter, ch: int) -> str: ...
    def GetProcess(self: SBCommandInterpreter) -> SBProcess: ...
    def GetPromptOnQuit(self: SBCommandInterpreter) -> bool: ...
    def GetQuitStatus(self: SBCommandInterpreter) -> int: ...
    def HandleCommand(self, *args) -> int: ...
    def HandleCommandsFromFile(self: SBCommandInterpreter, file: SBFileSpec, override_context: SBExecutionContext, options: SBCommandInterpreterRunOptions, result: SBCommandReturnObject): ...
    def HandleCompletion(self: SBCommandInterpreter, current_line: str, cursor_pos: int, match_start_point: int, max_return_elements: int, matches: SBStringList) -> int: ...
    def HandleCompletionWithDescriptions(self: SBCommandInterpreter, current_line: str, cursor_pos: int, match_start_point: int, max_return_elements: int, matches: SBStringList, descriptions: SBStringList) -> int: ...
    def HasAliasOptions(self: SBCommandInterpreter) -> bool: ...
    def HasAliases(self: SBCommandInterpreter) -> bool: ...
    def HasCommands(self: SBCommandInterpreter) -> bool: ...
    def HasCustomQuitExitCode(self: SBCommandInterpreter) -> bool: ...
    def InterruptCommand(self: SBCommandInterpreter) -> bool: ...
    def IsActive(self: SBCommandInterpreter) -> bool: ...
    def IsInteractive(self: SBCommandInterpreter) -> bool: ...
    def IsValid(self: SBCommandInterpreter) -> bool: ...
    def ResolveCommand(self: SBCommandInterpreter, command_line: str, result: SBCommandReturnObject): ...
    def SetPromptOnQuit(self: SBCommandInterpreter, b: bool): ...
    def SourceInitFileInCurrentWorkingDirectory(self: SBCommandInterpreter, result: SBCommandReturnObject): ...
    def SourceInitFileInHomeDirectory(self, *args): ...
    def UserCommandExists(self: SBCommandInterpreter, cmd: str) -> bool: ...
    def WasInterrupted(self: SBCommandInterpreter) -> bool: ...
    def __bool__(self): ...
    def __init__(self: SBCommandInterpreter, rhs: SBCommandInterpreter) -> SBCommandInterpreter: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBCommandInterpreterRunOptions(object):
    def GetAddToHistory(self: SBCommandInterpreterRunOptions) -> bool: ...
    def GetAutoHandleEvents(self: SBCommandInterpreterRunOptions) -> bool: ...
    def GetEchoCommands(self: SBCommandInterpreterRunOptions) -> bool: ...
    def GetEchoCommentCommands(self: SBCommandInterpreterRunOptions) -> bool: ...
    def GetPrintErrors(self: SBCommandInterpreterRunOptions) -> bool: ...
    def GetPrintResults(self: SBCommandInterpreterRunOptions) -> bool: ...
    def GetSpawnThread(self: SBCommandInterpreterRunOptions) -> bool: ...
    def GetStopOnContinue(self: SBCommandInterpreterRunOptions) -> bool: ...
    def GetStopOnCrash(self: SBCommandInterpreterRunOptions) -> bool: ...
    def GetStopOnError(self: SBCommandInterpreterRunOptions) -> bool: ...
    def SetAddToHistory(self: SBCommandInterpreterRunOptions, arg2: bool): ...
    def SetAutoHandleEvents(self: SBCommandInterpreterRunOptions, arg2: bool): ...
    def SetEchoCommands(self: SBCommandInterpreterRunOptions, arg2: bool): ...
    def SetEchoCommentCommands(self: SBCommandInterpreterRunOptions, echo: bool): ...
    def SetPrintErrors(self: SBCommandInterpreterRunOptions, arg2: bool): ...
    def SetPrintResults(self: SBCommandInterpreterRunOptions, arg2: bool): ...
    def SetSpawnThread(self: SBCommandInterpreterRunOptions, arg2: bool): ...
    def SetStopOnContinue(self: SBCommandInterpreterRunOptions, arg2: bool): ...
    def SetStopOnCrash(self: SBCommandInterpreterRunOptions, arg2: bool): ...
    def SetStopOnError(self: SBCommandInterpreterRunOptions, arg2: bool): ...
    def __init__(self, *args) -> SBCommandInterpreterRunOptions: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBCommandReturnObject(object):
    def AppendMessage(self: SBCommandReturnObject, message: str): ...
    def AppendWarning(self: SBCommandReturnObject, message: str): ...
    def Clear(self: SBCommandReturnObject): ...
    def GetDescription(self: SBCommandReturnObject, description: SBStream) -> bool: ...
    def GetError(self, *args) -> int: ...
    def GetErrorSize(self: SBCommandReturnObject) -> int: ...
    def GetOutput(self, *args) -> int: ...
    def GetOutputSize(self: SBCommandReturnObject) -> int: ...
    def GetStatus(self: SBCommandReturnObject) -> int: ...
    def HasResult(self: SBCommandReturnObject) -> bool: ...
    def IsValid(self: SBCommandReturnObject) -> bool: ...
    def Print(self: SBCommandReturnObject, str: str): ...
    def PutCString(self: SBCommandReturnObject, string: str): ...
    def PutError(self, *args) -> int: ...
    def PutOutput(self, *args) -> int: ...
    def SetError(self, *args): ...
    def SetImmediateErrorFile(self, *args): ...
    def SetImmediateOutputFile(self, *args): ...
    def SetStatus(self: SBCommandReturnObject, status: int): ...
    def Succeeded(self: SBCommandReturnObject) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBCommandReturnObject: ...
    def __nonzero__(self): ...
    def __repr__(self: SBCommandReturnObject) -> str: ...
    def flush(self: SBCommandReturnObject): ...
    def write(self: SBCommandReturnObject, str: str): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBCommunication(object):
    def AdoptFileDesriptor(self: SBCommunication, fd: int, owns_fd: bool) -> int: ...
    def Connect(self: SBCommunication, url: str) -> int: ...
    def Disconnect(self: SBCommunication) -> int: ...
    def GetBroadcaster(self: SBCommunication) -> SBBroadcaster: ...
    @staticmethod
    def GetBroadcasterClass() -> str: ...
    def GetCloseOnEOF(self: SBCommunication) -> bool: ...
    def IsConnected(self: SBCommunication) -> bool: ...
    def IsValid(self: SBCommunication) -> bool: ...
    def Read(self: SBCommunication, dst: bytes, dst_len: int, timeout_usec: int, status: int) -> int: ...
    def ReadThreadIsRunning(self: SBCommunication) -> bool: ...
    def ReadThreadStart(self: SBCommunication) -> bool: ...
    def ReadThreadStop(self: SBCommunication) -> bool: ...
    def SetCloseOnEOF(self: SBCommunication, b: bool): ...
    def SetReadThreadBytesReceivedCallback(self: SBCommunication, callback: Callable[[any, any, int], None], callback_baton: bytes) -> bool: ...
    def Write(self: SBCommunication, src: bytes, src_len: int, status: int) -> int: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBCommunication: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBCompileUnit(object):
    def FindLineEntryIndex(self, *args) -> int: ...
    def FindSupportFileIndex(self: SBCompileUnit, start_idx: int, sb_file: SBFileSpec, full: bool) -> int: ...
    def GetDescription(self: SBCompileUnit, description: SBStream) -> bool: ...
    def GetFileSpec(self: SBCompileUnit) -> SBFileSpec: ...
    def GetLanguage(self: SBCompileUnit) -> int: ...
    def GetLineEntryAtIndex(self: SBCompileUnit, idx: int) -> SBLineEntry: ...
    def GetNumLineEntries(self: SBCompileUnit) -> int: ...
    def GetNumSupportFiles(self: SBCompileUnit) -> int: ...
    def GetSupportFileAtIndex(self: SBCompileUnit, idx: int) -> SBFileSpec: ...
    def GetTypes(self: SBCompileUnit, type_mask: int = eTypeClassAny) -> SBTypeList: ...
    def IsValid(self: SBCompileUnit) -> bool: ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBCompileUnit: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBCompileUnit) -> str: ...
    @property
    def file(self) -> SBFileSpec: ...
    @property
    def num_line_entries(self) -> int: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBData(object):
    class read_data_helper(object):
        def __getitem__(self, key): ...
        def __init__(self, sbdata, readerfunc, item_size): ...
        def __len__(self): ...
        def all(self): ...
    def Append(self: SBData, rhs: SBData) -> bool: ...
    def Clear(self: SBData): ...
    @staticmethod
    def CreateDataFromCString(endian: int, addr_byte_size: int, data: str) -> SBData: ...
    @staticmethod
    def CreateDataFromDoubleArray(endian: int, addr_byte_size: int, array: list[float]) -> SBData: ...
    @classmethod
    def CreateDataFromInt(cls, value, size, target, ptr_size, endian): ...
    @staticmethod
    def CreateDataFromSInt32Array(endian: int, addr_byte_size: int, array: list[int]) -> SBData: ...
    @staticmethod
    def CreateDataFromSInt64Array(endian: int, addr_byte_size: int, array: list[int]) -> SBData: ...
    @staticmethod
    def CreateDataFromUInt32Array(endian: int, addr_byte_size: int, array: list[int]) -> SBData: ...
    @staticmethod
    def CreateDataFromUInt64Array(endian: int, addr_byte_size: int, array: list[int]) -> SBData: ...
    def GetAddress(self: SBData, error: SBError, offset: int) -> int: ...
    def GetAddressByteSize(self: SBData) -> int: ...
    def GetByteOrder(self: SBData) -> int: ...
    def GetByteSize(self: SBData) -> int: ...
    def GetDescription(self: SBData, description: SBStream, base_addr: int = 18446744073709551615) -> bool: ...
    def GetDouble(self: SBData, error: SBError, offset: int) -> float: ...
    def GetFloat(self: SBData, error: SBError, offset: int) -> float: ...
    def GetLongDouble(self: SBData, error: SBError, offset: int) -> float: ...
    def GetSignedInt16(self: SBData, error: SBError, offset: int) -> int: ...
    def GetSignedInt32(self: SBData, error: SBError, offset: int) -> int: ...
    def GetSignedInt64(self: SBData, error: SBError, offset: int) -> int: ...
    def GetSignedInt8(self: SBData, error: SBError, offset: int) -> int: ...
    def GetString(self: SBData, error: SBError, offset: int) -> str: ...
    def GetUnsignedInt16(self: SBData, error: SBError, offset: int) -> int: ...
    def GetUnsignedInt32(self: SBData, error: SBError, offset: int) -> int: ...
    def GetUnsignedInt64(self: SBData, error: SBError, offset: int) -> int: ...
    def GetUnsignedInt8(self: SBData, error: SBError, offset: int) -> int: ...
    def IsValid(self: SBData) -> bool: ...
    def ReadRawData(self: SBData, error: SBError, offset: int, buf: bytes) -> int: ...
    def SetAddressByteSize(self: SBData, addr_byte_size: int): ...
    def SetByteOrder(self: SBData, endian: int): ...
    def SetData(self: SBData, error: SBError, buf: bytes, endian: int, addr_size: int): ...
    def SetDataFromCString(self: SBData, data: str) -> bool: ...
    def SetDataFromDoubleArray(self: SBData, array: list[float]) -> bool: ...
    def SetDataFromSInt32Array(self: SBData, array: list[int]) -> bool: ...
    def SetDataFromSInt64Array(self: SBData, array: list[int]) -> bool: ...
    def SetDataFromUInt32Array(self: SBData, array: list[int]) -> bool: ...
    def SetDataFromUInt64Array(self: SBData, array: list[int]) -> bool: ...
    def SetDataWithOwnership(self: SBData, error: SBError, buf: bytes, endian: int, addr_size: int): ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBData: ...
    def __nonzero__(self): ...
    def __repr__(self: SBData) -> str: ...
    def _make_helper(self, sbdata, getfunc, itemsize): ...
    def _make_helper_double(self): ...
    def _make_helper_float(self): ...
    def _make_helper_sint16(self): ...
    def _make_helper_sint32(self): ...
    def _make_helper_sint64(self): ...
    def _make_helper_sint8(self): ...
    def _make_helper_uint16(self): ...
    def _make_helper_uint32(self): ...
    def _make_helper_uint64(self): ...
    def _make_helper_uint8(self): ...
    def _read_all_double(self): ...
    def _read_all_float(self): ...
    def _read_all_sint16(self): ...
    def _read_all_sint32(self): ...
    def _read_all_sint64(self): ...
    def _read_all_sint8(self): ...
    def _read_all_uint16(self): ...
    def _read_all_uint32(self): ...
    def _read_all_uint64(self): ...
    def _read_all_uint8(self): ...
    @property
    def byte_order(self) -> int: ...
    @byte_order.setter
    def byte_order(self, value:int): ...
    @property
    def double(self): ...
    @property
    def doubles(self): ...
    @property
    def float(self): ...
    @property
    def floats(self): ...
    @property
    def sint16(self): ...
    @property
    def sint16s(self): ...
    @property
    def sint32(self): ...
    @property
    def sint32s(self): ...
    @property
    def sint64(self): ...
    @property
    def sint64s(self): ...
    @property
    def sint8(self): ...
    @property
    def sint8s(self): ...
    @property
    def size(self) -> int: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def uint16(self): ...
    @property
    def uint16s(self): ...
    @property
    def uint32(self): ...
    @property
    def uint32s(self): ...
    @property
    def uint64(self): ...
    @property
    def uint64s(self): ...
    @property
    def uint8(self): ...
    @property
    def uint8s(self): ...

class SBDebugger(object):
    def CancelInterruptRequest(self: SBDebugger): ...
    def Clear(self: SBDebugger): ...
    @staticmethod
    def Create(*args) -> SBDebugger: ...
    def CreateCategory(self: SBDebugger, category_name: str) -> SBTypeCategory: ...
    def CreateTarget(self, *args) -> SBTarget: ...
    def CreateTargetWithFileAndArch(self: SBDebugger, filename: str, archname: str) -> SBTarget: ...
    def CreateTargetWithFileAndTargetTriple(self: SBDebugger, filename: str, target_triple: str) -> SBTarget: ...
    def DeleteCategory(self: SBDebugger, category_name: str) -> bool: ...
    def DeleteTarget(self: SBDebugger, target: SBTarget) -> bool: ...
    @staticmethod
    def Destroy(debugger: SBDebugger): ...
    def DispatchInput(self: SBDebugger, data: bytes): ...
    def DispatchInputEndOfFile(self: SBDebugger): ...
    def DispatchInputInterrupt(self: SBDebugger): ...
    def EnableLog(self: SBDebugger, channel: str, categories: list[str]) -> bool: ...
    @staticmethod
    def FindDebuggerWithID(id: int) -> SBDebugger: ...
    def FindTargetWithFileAndArch(self: SBDebugger, filename: str, arch: str) -> SBTarget: ...
    def FindTargetWithProcessID(self: SBDebugger, pid: int) -> SBTarget: ...
    def GetAsync(self: SBDebugger) -> bool: ...
    def GetAvailablePlatformInfoAtIndex(self: SBDebugger, idx: int) -> SBStructuredData: ...
    def GetBroadcaster(self: SBDebugger) -> SBBroadcaster: ...
    @staticmethod
    def GetBroadcasterClass() -> str: ...
    @staticmethod
    def GetBuildConfiguration() -> SBStructuredData: ...
    def GetCategory(self, *args) -> SBTypeCategory: ...
    def GetCategoryAtIndex(self: SBDebugger, arg2: int) -> SBTypeCategory: ...
    def GetCloseInputOnEOF(self: SBDebugger) -> bool: ...
    def GetCommandInterpreter(self: SBDebugger) -> SBCommandInterpreter: ...
    @staticmethod
    def GetDefaultArchitecture(arch_name: str, arch_name_len: int) -> bool: ...
    def GetDefaultCategory(self: SBDebugger) -> SBTypeCategory: ...
    def GetDescription(self: SBDebugger, description: SBStream) -> bool: ...
    @staticmethod
    def GetDiagnosticFromEvent(event: SBEvent) -> SBStructuredData: ...
    def GetDummyTarget(self: SBDebugger) -> SBTarget: ...
    def GetErrorFile(self: SBDebugger) -> SBFile: ...
    def GetErrorFileHandle(self: SBDebugger) -> FileSP: ...
    def GetFilterForType(self: SBDebugger, arg2: SBTypeNameSpecifier) -> SBTypeFilter: ...
    def GetFormatForType(self: SBDebugger, arg2: SBTypeNameSpecifier) -> SBTypeFormat: ...
    def GetID(self: SBDebugger) -> int: ...
    def GetIndexOfTarget(self: SBDebugger, target: SBTarget) -> int: ...
    def GetInputFile(self: SBDebugger) -> SBFile: ...
    def GetInputFileHandle(self: SBDebugger) -> FileSP: ...
    def GetInstanceName(self: SBDebugger) -> str: ...
    @staticmethod
    def GetInternalVariableValue(var_name: str, debugger_instance_name: str) -> SBStringList: ...
    def GetListener(self: SBDebugger) -> SBListener: ...
    def GetNumAvailablePlatforms(self: SBDebugger) -> int: ...
    def GetNumCategories(self: SBDebugger) -> int: ...
    def GetNumPlatforms(self: SBDebugger) -> int: ...
    def GetNumTargets(self: SBDebugger) -> int: ...
    def GetOutputFile(self: SBDebugger) -> SBFile: ...
    def GetOutputFileHandle(self: SBDebugger) -> FileSP: ...
    def GetPlatformAtIndex(self: SBDebugger, idx: int) -> SBPlatform: ...
    @staticmethod
    def GetProgressDataFromEvent(event: SBEvent) -> SBStructuredData: ...
    @staticmethod
    def GetProgressFromEvent(event: SBEvent) -> str: ...
    def GetPrompt(self: SBDebugger) -> str: ...
    def GetREPLLanguage(self: SBDebugger) -> int: ...
    def GetReproducerPath(self: SBDebugger) -> str: ...
    def GetScriptInterpreterInfo(self: SBDebugger, arg2: int) -> SBStructuredData: ...
    def GetScriptLanguage(self: SBDebugger) -> int: ...
    def GetScriptingLanguage(self: SBDebugger, script_language_name: str) -> int: ...
    def GetSelectedPlatform(self: SBDebugger) -> SBPlatform: ...
    def GetSelectedTarget(self: SBDebugger) -> SBTarget: ...
    def GetSetting(self: SBDebugger, setting: str = None) -> SBStructuredData: ...
    def GetSourceManager(self: SBDebugger) -> SBSourceManager: ...
    def GetSummaryForType(self: SBDebugger, arg2: SBTypeNameSpecifier) -> SBTypeSummary: ...
    def GetSyntheticForType(self: SBDebugger, arg2: SBTypeNameSpecifier) -> SBTypeSynthetic: ...
    def GetTargetAtIndex(self: SBDebugger, idx: int) -> SBTarget: ...
    def GetTerminalWidth(self: SBDebugger) -> int: ...
    def GetUseColor(self: SBDebugger) -> bool: ...
    def GetUseExternalEditor(self: SBDebugger) -> bool: ...
    def GetUseSourceCache(self: SBDebugger) -> bool: ...
    @staticmethod
    def GetVersionString() -> str: ...
    def HandleCommand(self: SBDebugger, command: str): ...
    def HandleProcessEvent(self, *args): ...
    @staticmethod
    def Initialize(): ...
    @staticmethod
    def InitializeWithErrorHandling() -> SBError: ...
    def InterruptRequested(self: SBDebugger) -> bool: ...
    def IsValid(self: SBDebugger) -> bool: ...
    def LoadTraceFromFile(self: SBDebugger, error: SBError, trace_description_file: SBFileSpec) -> SBTrace: ...
    @staticmethod
    def MemoryPressureDetected(): ...
    @staticmethod
    def PrintDiagnosticsOnError(): ...
    @staticmethod
    def PrintStackTraceOnError(): ...
    def RequestInterrupt(self: SBDebugger): ...
    def RestoreInputTerminalState(self: SBDebugger): ...
    def RunCommandInterpreter(self: SBDebugger, auto_handle_events: bool, spawn_thread: bool, options: SBCommandInterpreterRunOptions, num_errors: int, quit_requested: bool, stopped_for_crash: bool): ...
    def RunREPL(self: SBDebugger, language: int, repl_options: str) -> SBError: ...
    def SaveInputTerminalState(self: SBDebugger): ...
    def SetAsync(self: SBDebugger, b: bool): ...
    def SetCloseInputOnEOF(self: SBDebugger, b: bool): ...
    def SetCurrentPlatform(self: SBDebugger, platform_name: str) -> SBError: ...
    def SetCurrentPlatformSDKRoot(self: SBDebugger, sysroot: str) -> bool: ...
    @staticmethod
    def SetDefaultArchitecture(arch_name: str) -> bool: ...
    def SetDestroyCallback(self: SBDebugger, destroy_callback: Callable[[int, any], None]): ...
    def SetErrorFile(self, *args) -> SBError: ...
    def SetErrorFileHandle(self, file, transfer_ownership): ...
    def SetInputFile(self, *args) -> SBError: ...
    def SetInputFileHandle(self, file, transfer_ownership): ...
    def SetInputString(self: SBDebugger, data: str) -> SBError: ...
    @staticmethod
    def SetInternalVariable(var_name: str, value: str, debugger_instance_name: str) -> SBError: ...
    def SetLoggingCallback(self: SBDebugger, log_callback: Callable[[str, any], None]): ...
    def SetOutputFile(self, *args) -> SBError: ...
    def SetOutputFileHandle(self, file, transfer_ownership): ...
    def SetPrompt(self: SBDebugger, prompt: str): ...
    def SetREPLLanguage(self: SBDebugger, repl_lang: int): ...
    def SetScriptLanguage(self: SBDebugger, script_lang: int): ...
    def SetSelectedPlatform(self: SBDebugger, platform: SBPlatform): ...
    def SetSelectedTarget(self: SBDebugger, target: SBTarget): ...
    def SetTerminalWidth(self: SBDebugger, term_width: int): ...
    def SetUseColor(self: SBDebugger, use_color: bool) -> bool: ...
    def SetUseExternalEditor(self: SBDebugger, input: bool) -> bool: ...
    def SetUseSourceCache(self: SBDebugger, use_source_cache: bool) -> bool: ...
    def SkipAppInitFiles(self: SBDebugger, b: bool): ...
    def SkipLLDBInitFiles(self: SBDebugger, b: bool): ...
    @staticmethod
    def StateAsCString(state: int) -> str: ...
    @staticmethod
    def StateIsRunningState(state: int) -> bool: ...
    @staticmethod
    def StateIsStoppedState(state: int) -> bool: ...
    @staticmethod
    def Terminate(): ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBDebugger: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __nonzero__(self): ...
    def __repr__(self: SBDebugger) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBDeclaration(object):
    def GetColumn(self: SBDeclaration) -> int: ...
    def GetDescription(self: SBDeclaration, description: SBStream) -> bool: ...
    def GetFileSpec(self: SBDeclaration) -> SBFileSpec: ...
    def GetLine(self: SBDeclaration) -> int: ...
    def IsValid(self: SBDeclaration) -> bool: ...
    def SetColumn(self: SBDeclaration, column: int): ...
    def SetFileSpec(self: SBDeclaration, filespec: SBFileSpec): ...
    def SetLine(self: SBDeclaration, line: int): ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBDeclaration: ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBDeclaration) -> str: ...
    @property
    def column(self) -> int: ...
    @property
    def file(self) -> SBFileSpec: ...
    @property
    def line(self) -> int: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBEnvironment(object):
    def Clear(self: SBEnvironment): ...
    def Get(self: SBEnvironment, name: str) -> str: ...
    def GetEntries(self: SBEnvironment) -> SBStringList: ...
    def GetNameAtIndex(self: SBEnvironment, index: int) -> str: ...
    def GetNumValues(self: SBEnvironment) -> int: ...
    def GetValueAtIndex(self: SBEnvironment, index: int) -> str: ...
    def PutEntry(self: SBEnvironment, name_and_value: str): ...
    def Set(self: SBEnvironment, name: str, value: str, overwrite: bool) -> bool: ...
    def SetEntries(self: SBEnvironment, entries: SBStringList, append: bool): ...
    def Unset(self: SBEnvironment, name: str) -> bool: ...
    def __init__(self, *args) -> SBEnvironment: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBError(object):
    def Clear(self: SBError): ...
    def Fail(self: SBError) -> bool: ...
    def GetCString(self: SBError) -> str: ...
    def GetDescription(self: SBError, description: SBStream) -> bool: ...
    def GetError(self: SBError) -> int: ...
    def GetType(self: SBError) -> int: ...
    def IsValid(self: SBError) -> bool: ...
    def SetError(self: SBError, err: int, type: int): ...
    def SetErrorString(self: SBError, err_str: str): ...
    def SetErrorStringWithFormat(self: SBError, format: str, str1: str = None, str2: str = None, str3: str = None) -> int: ...
    def SetErrorToErrno(self: SBError): ...
    def SetErrorToGenericError(self: SBError): ...
    def Success(self: SBError) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBError: ...
    def __nonzero__(self): ...
    def __repr__(self: SBError) -> str: ...
    @property
    def description(self) -> str: ...
    @property
    def fail(self) -> bool: ...
    @property
    def success(self) -> bool: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def type(self) -> int: ...
    @property
    def value(self) -> int: ...

class SBEvent(object):
    def BroadcasterMatchesRef(self: SBEvent, broadcaster: SBBroadcaster) -> bool: ...
    def Clear(self: SBEvent): ...
    def GetBroadcaster(self: SBEvent) -> SBBroadcaster: ...
    def GetBroadcasterClass(self: SBEvent) -> str: ...
    @staticmethod
    def GetCStringFromEvent(event: SBEvent) -> str: ...
    def GetDataFlavor(self: SBEvent) -> str: ...
    def GetDescription(self, *args) -> bool: ...
    def GetType(self: SBEvent) -> int: ...
    def IsValid(self: SBEvent) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBEvent: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBExecutionContext(object):
    def GetFrame(self: SBExecutionContext) -> SBFrame: ...
    def GetProcess(self: SBExecutionContext) -> SBProcess: ...
    def GetTarget(self: SBExecutionContext) -> SBTarget: ...
    def GetThread(self: SBExecutionContext) -> SBThread: ...
    def __init__(self, *args) -> SBExecutionContext: ...
    def __repr__(self): ...
    @property
    def frame(self) -> SBFrame: ...
    @property
    def process(self) -> SBProcess: ...
    @property
    def target(self) -> SBTarget: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def thread(self) -> SBThread: ...

class SBExpressionOptions(object):
    def GetAllowJIT(self: SBExpressionOptions) -> bool: ...
    def GetAutoApplyFixIts(self: SBExpressionOptions) -> bool: ...
    def GetCoerceResultToId(self: SBExpressionOptions) -> bool: ...
    def GetFetchDynamicValue(self: SBExpressionOptions) -> int: ...
    def GetGenerateDebugInfo(self: SBExpressionOptions) -> bool: ...
    def GetIgnoreBreakpoints(self: SBExpressionOptions) -> bool: ...
    def GetOneThreadTimeoutInMicroSeconds(self: SBExpressionOptions) -> int: ...
    def GetPrefix(self: SBExpressionOptions) -> str: ...
    def GetRetriesWithFixIts(self: SBExpressionOptions) -> int: ...
    def GetStopOthers(self: SBExpressionOptions) -> bool: ...
    def GetSuppressPersistentResult(self: SBExpressionOptions) -> bool: ...
    def GetTimeoutInMicroSeconds(self: SBExpressionOptions) -> int: ...
    def GetTopLevel(self: SBExpressionOptions) -> bool: ...
    def GetTrapExceptions(self: SBExpressionOptions) -> bool: ...
    def GetTryAllThreads(self: SBExpressionOptions) -> bool: ...
    def GetUnwindOnError(self: SBExpressionOptions) -> bool: ...
    def SetAllowJIT(self: SBExpressionOptions, allow: bool): ...
    def SetAutoApplyFixIts(self: SBExpressionOptions, b: bool = True): ...
    def SetCoerceResultToId(self: SBExpressionOptions, coerce: bool = True): ...
    def SetFetchDynamicValue(self: SBExpressionOptions, dynamic: int = eDynamicCanRunTarget): ...
    def SetGenerateDebugInfo(self: SBExpressionOptions, b: bool = True): ...
    def SetIgnoreBreakpoints(self: SBExpressionOptions, ignore: bool = True): ...
    def SetLanguage(self: SBExpressionOptions, language: int): ...
    def SetOneThreadTimeoutInMicroSeconds(self: SBExpressionOptions, timeout: int = 0): ...
    def SetPrefix(self: SBExpressionOptions, prefix: str): ...
    def SetRetriesWithFixIts(self: SBExpressionOptions, retries: int): ...
    def SetStopOthers(self: SBExpressionOptions, stop_others: bool = True): ...
    def SetSuppressPersistentResult(self: SBExpressionOptions, b: bool = False): ...
    def SetTimeoutInMicroSeconds(self: SBExpressionOptions, timeout: int = 0): ...
    def SetTopLevel(self: SBExpressionOptions, b: bool = True): ...
    def SetTrapExceptions(self: SBExpressionOptions, trap_exceptions: bool = True): ...
    def SetTryAllThreads(self: SBExpressionOptions, run_others: bool = True): ...
    def SetUnwindOnError(self: SBExpressionOptions, unwind: bool = True): ...
    def __init__(self, *args) -> SBExpressionOptions: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBFile(object):
    def Close(self: SBFile) -> SBError: ...
    @classmethod
    def Create(cls, file, borrow, force_io_methods): ...
    def Flush(self: SBFile) -> SBError: ...
    def GetFile(self: SBFile) -> FileSP: ...
    def IsValid(self: SBFile) -> bool: ...
    @staticmethod
    def MakeBorrowed(BORROWED: FileSP) -> SBFile: ...
    @staticmethod
    def MakeBorrowedForcingIOMethods(BORROWED_FORCE_IO_METHODS: FileSP) -> SBFile: ...
    @staticmethod
    def MakeForcingIOMethods(FORCE_IO_METHODS: FileSP) -> SBFile: ...
    def Read(buffer) -> tuple[SBError, int]: ...
    def Write(buffer) -> tuple[SBError, int]: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBFile: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBFileSpec(object):
    def AppendPathComponent(self: SBFileSpec, file_or_directory: str): ...
    def Exists(self: SBFileSpec) -> bool: ...
    def GetDescription(self: SBFileSpec, description: SBStream) -> bool: ...
    def GetDirectory(self: SBFileSpec) -> str: ...
    def GetFilename(self: SBFileSpec) -> str: ...
    def GetPath(self: SBFileSpec, dst_path: str, dst_len: int) -> int: ...
    def IsValid(self: SBFileSpec) -> bool: ...
    def ResolveExecutableLocation(self: SBFileSpec) -> bool: ...
    @staticmethod
    def ResolvePath(src_path: str, dst_path: str, dst_len: int) -> int: ...
    def SetDirectory(self: SBFileSpec, directory: str): ...
    def SetFilename(self: SBFileSpec, filename: str): ...
    def __bool__(self): ...
    def __eq__(self: SBFileSpec, rhs: SBFileSpec) -> bool: ...
    def __init__(self, *args) -> SBFileSpec: ...
    def __ne__(self: SBFileSpec, rhs: SBFileSpec) -> bool: ...
    def __nonzero__(self): ...
    def __repr__(self: SBFileSpec) -> str: ...
    @property
    def basename(self) -> str: ...
    @property
    def dirname(self) -> str: ...
    @property
    def exists(self) -> bool: ...
    @property
    def fullpath(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBFileSpecList(object):
    def Append(self: SBFileSpecList, sb_file: SBFileSpec): ...
    def AppendIfUnique(self: SBFileSpecList, sb_file: SBFileSpec) -> bool: ...
    def Clear(self: SBFileSpecList): ...
    def FindFileIndex(self: SBFileSpecList, idx: int, sb_file: SBFileSpec, full: bool) -> int: ...
    def GetDescription(self: SBFileSpecList, description: SBStream) -> bool: ...
    def GetFileSpecAtIndex(self: SBFileSpecList, idx: int) -> SBFileSpec: ...
    def GetSize(self: SBFileSpecList) -> int: ...
    def __init__(self, *args) -> SBFileSpecList: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBFrame(object):
    def Clear(self: SBFrame): ...
    def Disassemble(self: SBFrame) -> str: ...
    def EvaluateExpression(self, *args) -> SBValue: ...
    def FindRegister(self: SBFrame, name: str) -> SBValue: ...
    def FindValue(self, *args) -> SBValue: ...
    def FindVariable(self, *args) -> SBValue: ...
    def GetBlock(self: SBFrame) -> SBBlock: ...
    def GetCFA(self: SBFrame) -> int: ...
    def GetCompileUnit(self: SBFrame) -> SBCompileUnit: ...
    def GetDescription(self: SBFrame, description: SBStream) -> bool: ...
    def GetDisplayFunctionName(self: SBFrame) -> str: ...
    def GetFP(self: SBFrame) -> int: ...
    def GetFrameBlock(self: SBFrame) -> SBBlock: ...
    def GetFrameID(self: SBFrame) -> int: ...
    def GetFunction(self: SBFrame) -> SBFunction: ...
    def GetFunctionName(self, *args) -> int: ...
    def GetLineEntry(self: SBFrame) -> SBLineEntry: ...
    def GetModule(self: SBFrame) -> SBModule: ...
    def GetPC(self: SBFrame) -> int: ...
    def GetPCAddress(self: SBFrame) -> SBAddress: ...
    def GetRegisters(self: SBFrame) -> SBValueList: ...
    def GetSP(self: SBFrame) -> int: ...
    def GetSymbol(self: SBFrame) -> SBSymbol: ...
    def GetSymbolContext(self: SBFrame, resolve_scope: int) -> SBSymbolContext: ...
    def GetThread(self: SBFrame) -> SBThread: ...
    def GetValueForVariablePath(self, *args) -> SBValue: ...
    def GetVariables(self, *args) -> SBValueList: ...
    def GuessLanguage(self: SBFrame) -> int: ...
    def IsArtificial(self, *args) -> bool: ...
    def IsEqual(self: SBFrame, that: SBFrame) -> bool: ...
    def IsInlined(self, *args) -> bool: ...
    def IsValid(self: SBFrame) -> bool: ...
    def SetPC(self: SBFrame, new_pc: int) -> bool: ...
    def __bool__(self): ...
    def __eq__(self: SBFrame, rhs: SBFrame) -> bool: ...
    def __init__(self, *args) -> SBFrame: ...
    def __ne__(self: SBFrame, rhs: SBFrame) -> bool: ...
    def __nonzero__(self): ...
    def __repr__(self: SBFrame) -> str: ...
    def get_all_variables(self): ...
    def get_arguments(self): ...
    def get_locals(self): ...
    def get_parent_frame(self): ...
    def get_registers_access(self): ...
    def get_statics(self): ...
    def var(self, var_expr_path): ...
    @property
    def addr(self) -> SBAddress: ...
    @property
    def args(self): ...
    @property
    def arguments(self): ...
    @property
    def block(self) -> SBBlock: ...
    @property
    def compile_unit(self) -> SBCompileUnit: ...
    @property
    def disassembly(self) -> str: ...
    @property
    def fp(self) -> int: ...
    @property
    def function(self) -> SBFunction: ...
    @property
    def idx(self) -> int: ...
    @property
    def is_inlined(self) -> bool: ...
    @property
    def line_entry(self) -> SBLineEntry: ...
    @property
    def locals(self): ...
    @property
    def module(self) -> SBModule: ...
    @property
    def name(self) -> int: ...
    @property
    def parent(self): ...
    @property
    def pc(self) -> int: ...
    @pc.setter
    def pc(self, value:int): ...
    @property
    def reg(self): ...
    @property
    def register(self): ...
    @property
    def registers(self) -> SBValueList: ...
    @property
    def regs(self) -> SBValueList: ...
    @property
    def sp(self) -> int: ...
    @property
    def statics(self): ...
    @property
    def symbol(self) -> SBSymbol: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def thread(self) -> SBThread: ...
    @property
    def variables(self): ...
    @property
    def vars(self): ...

class SBFunction(object):
    def GetArgumentName(self: SBFunction, arg_idx: int) -> str: ...
    def GetBlock(self: SBFunction) -> SBBlock: ...
    def GetDescription(self: SBFunction, description: SBStream) -> bool: ...
    def GetDisplayName(self: SBFunction) -> str: ...
    def GetEndAddress(self: SBFunction) -> SBAddress: ...
    def GetInstructions(self, *args) -> SBInstructionList: ...
    def GetIsOptimized(self: SBFunction) -> bool: ...
    def GetLanguage(self: SBFunction) -> int: ...
    def GetMangledName(self: SBFunction) -> str: ...
    def GetName(self: SBFunction) -> str: ...
    def GetPrologueByteSize(self: SBFunction) -> int: ...
    def GetStartAddress(self: SBFunction) -> SBAddress: ...
    def GetType(self: SBFunction) -> SBType: ...
    def IsValid(self: SBFunction) -> bool: ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBFunction: ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBFunction) -> str: ...
    def get_instructions_from_current_target(self): ...
    @property
    def addr(self) -> SBAddress: ...
    @property
    def block(self) -> SBBlock: ...
    @property
    def end_addr(self) -> SBAddress: ...
    @property
    def instructions(self): ...
    @property
    def mangled(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def prologue_size(self) -> int: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def type(self) -> SBType: ...

class SBHostOS(object):
    @staticmethod
    def GetLLDBPath(path_type: int) -> SBFileSpec: ...
    @staticmethod
    def GetLLDBPythonPath() -> SBFileSpec: ...
    @staticmethod
    def GetProgramFileSpec() -> SBFileSpec: ...
    @staticmethod
    def GetUserHomeDirectory() -> SBFileSpec: ...
    @staticmethod
    def ThreadCancel(thread, err: SBError) -> bool: ...
    @staticmethod
    def ThreadCreate(name: str, thread_function, thread_arg: bytes, err: SBError): ...
    @staticmethod
    def ThreadCreated(name: str): ...
    @staticmethod
    def ThreadDetach(thread, err: SBError) -> bool: ...
    @staticmethod
    def ThreadJoin(thread, result, err: SBError) -> bool: ...
    def __init__(self: SBHostOS) -> SBHostOS: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBInstruction(object):
    def CanSetBreakpoint(self: SBInstruction) -> bool: ...
    def DoesBranch(self: SBInstruction) -> bool: ...
    def DumpEmulation(self: SBInstruction, triple: str) -> bool: ...
    def EmulateWithFrame(self: SBInstruction, frame: SBFrame, evaluate_options: int) -> bool: ...
    def GetAddress(self: SBInstruction) -> SBAddress: ...
    def GetByteSize(self: SBInstruction) -> int: ...
    def GetComment(self: SBInstruction, target: SBTarget) -> str: ...
    def GetControlFlowKind(self: SBInstruction, target: SBTarget) -> int: ...
    def GetData(self: SBInstruction, target: SBTarget) -> SBData: ...
    def GetDescription(self: SBInstruction, description: SBStream) -> bool: ...
    def GetMnemonic(self: SBInstruction, target: SBTarget) -> str: ...
    def GetOperands(self: SBInstruction, target: SBTarget) -> str: ...
    def HasDelaySlot(self: SBInstruction) -> bool: ...
    def IsValid(self: SBInstruction) -> bool: ...
    def Print(self, *args): ...
    def TestEmulation(self: SBInstruction, output_stream: SBStream, test_file: str) -> bool: ...
    def __bool__(self): ...
    def __comment_property__(self): ...
    def __file_addr_property__(self): ...
    def __init__(self, *args) -> SBInstruction: ...
    def __load_adrr_property__(self): ...
    def __mnemonic_property__(self): ...
    def __nonzero__(self): ...
    def __operands_property__(self): ...
    def __repr__(self: SBInstruction) -> str: ...
    @property
    def addr(self) -> SBAddress: ...
    @property
    def comment(self): ...
    @property
    def is_branch(self) -> bool: ...
    @property
    def mnemonic(self): ...
    @property
    def operands(self): ...
    @property
    def size(self) -> int: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBInstructionList(object):
    def AppendInstruction(self: SBInstructionList, inst: SBInstruction): ...
    def Clear(self: SBInstructionList): ...
    def DumpEmulationForAllInstructions(self: SBInstructionList, triple: str) -> bool: ...
    def GetDescription(self: SBInstructionList, description: SBStream) -> bool: ...
    def GetInstructionAtIndex(self: SBInstructionList, idx: int) -> SBInstruction: ...
    def GetInstructionsCount(self: SBInstructionList, start: SBAddress, end: SBAddress, canSetBreakpoint: bool = False) -> int: ...
    def GetSize(self: SBInstructionList) -> int: ...
    def IsValid(self: SBInstructionList) -> bool: ...
    def Print(self, *args): ...
    def __bool__(self): ...
    def __getitem__(self, key): ...
    def __init__(self, *args) -> SBInstructionList: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __nonzero__(self): ...
    def __repr__(self: SBInstructionList) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBLanguageRuntime(object):
    @staticmethod
    def GetLanguageTypeFromString(string: str) -> int: ...
    @staticmethod
    def GetNameForLanguageType(language: int) -> str: ...
    def __init__(self: SBLanguageRuntime) -> SBLanguageRuntime: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBLaunchInfo(object):
    def AddCloseFileAction(self: SBLaunchInfo, fd: int) -> bool: ...
    def AddDuplicateFileAction(self: SBLaunchInfo, fd: int, dup_fd: int) -> bool: ...
    def AddOpenFileAction(self: SBLaunchInfo, fd: int, path: str, read: bool, write: bool) -> bool: ...
    def AddSuppressFileAction(self: SBLaunchInfo, fd: int, read: bool, write: bool) -> bool: ...
    def Clear(self: SBLaunchInfo): ...
    def GetArgumentAtIndex(self: SBLaunchInfo, idx: int) -> str: ...
    def GetDetachOnError(self: SBLaunchInfo) -> bool: ...
    def GetEnvironment(self: SBLaunchInfo) -> SBEnvironment: ...
    def GetEnvironmentEntryAtIndex(self: SBLaunchInfo, idx: int) -> str: ...
    def GetExecutableFile(self: SBLaunchInfo) -> SBFileSpec: ...
    def GetGroupID(self: SBLaunchInfo) -> int: ...
    def GetLaunchEventData(self: SBLaunchInfo) -> str: ...
    def GetLaunchFlags(self: SBLaunchInfo) -> int: ...
    def GetListener(self: SBLaunchInfo) -> SBListener: ...
    def GetNumArguments(self: SBLaunchInfo) -> int: ...
    def GetNumEnvironmentEntries(self: SBLaunchInfo) -> int: ...
    def GetProcessID(self: SBLaunchInfo) -> int: ...
    def GetProcessPluginName(self: SBLaunchInfo) -> str: ...
    def GetResumeCount(self: SBLaunchInfo) -> int: ...
    def GetScriptedProcessClassName(self: SBLaunchInfo) -> str: ...
    def GetScriptedProcessDictionary(self: SBLaunchInfo) -> SBStructuredData: ...
    def GetShadowListener(self: SBLaunchInfo) -> SBListener: ...
    def GetShell(self: SBLaunchInfo) -> str: ...
    def GetShellExpandArguments(self: SBLaunchInfo) -> bool: ...
    def GetUserID(self: SBLaunchInfo) -> int: ...
    def GetWorkingDirectory(self: SBLaunchInfo) -> str: ...
    def GroupIDIsValid(self: SBLaunchInfo) -> bool: ...
    def SetArguments(self: SBLaunchInfo, argv: list[str], append: bool): ...
    def SetDetachOnError(self: SBLaunchInfo, enable: bool): ...
    def SetEnvironment(self: SBLaunchInfo, env: SBEnvironment, append: bool): ...
    def SetEnvironmentEntries(self: SBLaunchInfo, envp: list[str], append: bool): ...
    def SetExecutableFile(self: SBLaunchInfo, exe_file: SBFileSpec, add_as_first_arg: bool): ...
    def SetGroupID(self: SBLaunchInfo, gid: int): ...
    def SetLaunchEventData(self: SBLaunchInfo, data: str): ...
    def SetLaunchFlags(self: SBLaunchInfo, flags: int): ...
    def SetListener(self: SBLaunchInfo, listener: SBListener): ...
    def SetProcessPluginName(self: SBLaunchInfo, plugin_name: str): ...
    def SetResumeCount(self: SBLaunchInfo, c: int): ...
    def SetScriptedProcessClassName(self: SBLaunchInfo, class_name: str): ...
    def SetScriptedProcessDictionary(self: SBLaunchInfo, dict: SBStructuredData): ...
    def SetShadowListener(self: SBLaunchInfo, listener: SBListener): ...
    def SetShell(self: SBLaunchInfo, path: str): ...
    def SetShellExpandArguments(self: SBLaunchInfo, expand: bool): ...
    def SetUserID(self: SBLaunchInfo, uid: int): ...
    def SetWorkingDirectory(self: SBLaunchInfo, working_dir: str): ...
    def UserIDIsValid(self: SBLaunchInfo) -> bool: ...
    def __init__(self: SBLaunchInfo, argv: list[str]) -> SBLaunchInfo: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBLineEntry(object):
    def GetColumn(self: SBLineEntry) -> int: ...
    def GetDescription(self: SBLineEntry, description: SBStream) -> bool: ...
    def GetEndAddress(self: SBLineEntry) -> SBAddress: ...
    def GetFileSpec(self: SBLineEntry) -> SBFileSpec: ...
    def GetLine(self: SBLineEntry) -> int: ...
    def GetStartAddress(self: SBLineEntry) -> SBAddress: ...
    def IsValid(self: SBLineEntry) -> bool: ...
    def SetColumn(self: SBLineEntry, column: int): ...
    def SetFileSpec(self: SBLineEntry, filespec: SBFileSpec): ...
    def SetLine(self: SBLineEntry, line: int): ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBLineEntry: ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBLineEntry) -> str: ...
    @property
    def addr(self) -> SBAddress: ...
    @property
    def column(self) -> int: ...
    @property
    def end_addr(self) -> SBAddress: ...
    @property
    def file(self) -> SBFileSpec: ...
    @property
    def line(self) -> int: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBListener(object):
    def AddEvent(self: SBListener, event: SBEvent): ...
    def Clear(self: SBListener): ...
    def GetNextEvent(self: SBListener, sb_event: SBEvent) -> bool: ...
    def GetNextEventForBroadcaster(self: SBListener, broadcaster: SBBroadcaster, sb_event: SBEvent) -> bool: ...
    def GetNextEventForBroadcasterWithType(self: SBListener, broadcaster: SBBroadcaster, event_type_mask: int, sb_event: SBEvent) -> bool: ...
    def HandleBroadcastEvent(self: SBListener, event: SBEvent) -> bool: ...
    def IsValid(self: SBListener) -> bool: ...
    def PeekAtNextEvent(self: SBListener, sb_event: SBEvent) -> bool: ...
    def PeekAtNextEventForBroadcaster(self: SBListener, broadcaster: SBBroadcaster, sb_event: SBEvent) -> bool: ...
    def PeekAtNextEventForBroadcasterWithType(self: SBListener, broadcaster: SBBroadcaster, event_type_mask: int, sb_event: SBEvent) -> bool: ...
    def StartListeningForEventClass(self: SBListener, debugger: SBDebugger, broadcaster_class: str, event_mask: int) -> int: ...
    def StartListeningForEvents(self: SBListener, broadcaster: SBBroadcaster, event_mask: int) -> int: ...
    def StopListeningForEventClass(self: SBListener, debugger: SBDebugger, broadcaster_class: str, event_mask: int) -> bool: ...
    def StopListeningForEvents(self: SBListener, broadcaster: SBBroadcaster, event_mask: int) -> bool: ...
    def WaitForEvent(self: SBListener, num_seconds: int, event: SBEvent) -> bool: ...
    def WaitForEventForBroadcaster(self: SBListener, num_seconds: int, broadcaster: SBBroadcaster, sb_event: SBEvent) -> bool: ...
    def WaitForEventForBroadcasterWithType(self: SBListener, num_seconds: int, broadcaster: SBBroadcaster, event_type_mask: int, sb_event: SBEvent) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBListener: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBMemoryRegionInfo(object):
    def Clear(self: SBMemoryRegionInfo): ...
    def GetDescription(self: SBMemoryRegionInfo, description: SBStream) -> bool: ...
    def GetDirtyPageAddressAtIndex(self: SBMemoryRegionInfo, idx: int) -> int: ...
    def GetName(self: SBMemoryRegionInfo) -> str: ...
    def GetNumDirtyPages(self: SBMemoryRegionInfo) -> int: ...
    def GetPageSize(self: SBMemoryRegionInfo) -> int: ...
    def GetRegionBase(self: SBMemoryRegionInfo) -> int: ...
    def GetRegionEnd(self: SBMemoryRegionInfo) -> int: ...
    def HasDirtyMemoryPageList(self): ...
    def IsExecutable(self: SBMemoryRegionInfo) -> bool: ...
    def IsMapped(self: SBMemoryRegionInfo) -> bool: ...
    def IsReadable(self: SBMemoryRegionInfo) -> bool: ...
    def IsWritable(self: SBMemoryRegionInfo) -> bool: ...
    def __eq__(self: SBMemoryRegionInfo, rhs: SBMemoryRegionInfo) -> bool: ...
    def __init__(self, *args) -> SBMemoryRegionInfo: ...
    def __ne__(self: SBMemoryRegionInfo, rhs: SBMemoryRegionInfo) -> bool: ...
    def __repr__(self: SBMemoryRegionInfo) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBMemoryRegionInfoList(object):
    def Append(self, *args): ...
    def Clear(self: SBMemoryRegionInfoList): ...
    def GetMemoryRegionAtIndex(self: SBMemoryRegionInfoList, idx: int, region_info: SBMemoryRegionInfo) -> bool: ...
    def GetMemoryRegionContainingAddress(self: SBMemoryRegionInfoList, addr: int, region_info: SBMemoryRegionInfo) -> bool: ...
    def GetSize(self: SBMemoryRegionInfoList) -> int: ...
    def __init__(self, *args) -> SBMemoryRegionInfoList: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBModule(object):
    class compile_units_access(object):
        class re_compile_type(object):
            pass
        def __getitem__(self, key): ...
        def __init__(self, sbmodule): ...
        def __len__(self): ...
    class sections_access(object):
        class re_compile_type(object):
            pass
        def __getitem__(self, key): ...
        def __init__(self, sbmodule): ...
        def __len__(self): ...
    class symbols_access(object):
        class re_compile_type(object):
            pass
        def __getitem__(self, key): ...
        def __init__(self, sbmodule): ...
        def __len__(self): ...
    def Clear(self: SBModule): ...
    def FindCompileUnits(self: SBModule, sb_file_spec: SBFileSpec) -> SBSymbolContextList: ...
    def FindFirstGlobalVariable(self: SBModule, target: SBTarget, name: str) -> SBValue: ...
    def FindFirstType(self: SBModule, name: str) -> SBType: ...
    def FindFunctions(self: SBModule, name: str, name_type_mask: int = eFunctionNameTypeAny) -> SBSymbolContextList: ...
    def FindGlobalVariables(self: SBModule, target: SBTarget, name: str, max_matches: int) -> SBValueList: ...
    def FindSection(self: SBModule, sect_name: str) -> SBSection: ...
    def FindSymbol(self: SBModule, name: str, type: int = eSymbolTypeAny) -> SBSymbol: ...
    def FindSymbols(self: SBModule, name: str, type: int = eSymbolTypeAny) -> SBSymbolContextList: ...
    def FindTypes(self: SBModule, type: str) -> SBTypeList: ...
    @staticmethod
    def GarbageCollectAllocatedModules(): ...
    def GetAddressByteSize(self: SBModule) -> int: ...
    def GetBasicType(self: SBModule, type: int) -> SBType: ...
    def GetByteOrder(self: SBModule) -> int: ...
    def GetCompileUnitAtIndex(self: SBModule, arg2: int) -> SBCompileUnit: ...
    def GetDescription(self: SBModule, description: SBStream) -> bool: ...
    def GetFileSpec(self: SBModule) -> SBFileSpec: ...
    def GetNumCompileUnits(self: SBModule) -> int: ...
    def GetNumSections(self: SBModule) -> int: ...
    def GetNumSymbols(self: SBModule) -> int: ...
    @staticmethod
    def GetNumberAllocatedModules() -> int: ...
    def GetObjectFileEntryPointAddress(self: SBModule) -> SBAddress: ...
    def GetObjectFileHeaderAddress(self: SBModule) -> SBAddress: ...
    def GetPlatformFileSpec(self: SBModule) -> SBFileSpec: ...
    def GetRemoteInstallFileSpec(self: SBModule) -> SBFileSpec: ...
    def GetSectionAtIndex(self: SBModule, idx: int) -> SBSection: ...
    def GetSymbolAtIndex(self: SBModule, idx: int) -> SBSymbol: ...
    def GetSymbolFileSpec(self: SBModule) -> SBFileSpec: ...
    def GetTriple(self: SBModule) -> str: ...
    def GetTypeByID(self: SBModule, uid: int) -> SBType: ...
    def GetTypes(self: SBModule, type_mask: int = eTypeClassAny) -> SBTypeList: ...
    def GetUUIDBytes(self: SBModule) -> bytes: ...
    def GetUUIDString(self: SBModule) -> str: ...
    def GetVersion(self: SBModule) -> int: ...
    def IsFileBacked(self: SBModule) -> bool: ...
    def IsValid(self: SBModule) -> bool: ...
    def ResolveFileAddress(self: SBModule, vm_addr: int) -> SBAddress: ...
    def ResolveSymbolContextForAddress(self: SBModule, addr: SBAddress, resolve_scope: int) -> SBSymbolContext: ...
    def SetPlatformFileSpec(self: SBModule, platform_file: SBFileSpec) -> bool: ...
    def SetRemoteInstallFileSpec(self: SBModule, file: SBFileSpec) -> bool: ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBModule: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBModule) -> str: ...
    def compile_unit_iter(self): ...
    def get_compile_units_access_object(self): ...
    def get_compile_units_array(self): ...
    def get_sections_access_object(self): ...
    def get_sections_array(self): ...
    def get_symbols_access_object(self): ...
    def get_symbols_array(self): ...
    def get_uuid(self): ...
    def section_iter(self): ...
    def symbol_in_section_iter(self, section): ...
    @property
    def addr_size(self) -> int: ...
    @property
    def byte_order(self) -> int: ...
    @property
    def compile_units(self): ...
    @property
    def file(self) -> SBFileSpec: ...
    @property
    def num_sections(self) -> int: ...
    @property
    def num_symbols(self) -> int: ...
    @property
    def platform_file(self) -> SBFileSpec: ...
    @property
    def section(self): ...
    @property
    def sections(self): ...
    @property
    def symbol(self): ...
    @property
    def symbols(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def triple(self) -> str: ...
    @property
    def uuid(self): ...

class SBModuleSpec(object):
    def Clear(self: SBModuleSpec): ...
    def GetDescription(self: SBModuleSpec, description: SBStream) -> bool: ...
    def GetFileSpec(self: SBModuleSpec) -> SBFileSpec: ...
    def GetObjectName(self: SBModuleSpec) -> str: ...
    def GetObjectOffset(self: SBModuleSpec) -> int: ...
    def GetObjectSize(self: SBModuleSpec) -> int: ...
    def GetPlatformFileSpec(self: SBModuleSpec) -> SBFileSpec: ...
    def GetSymbolFileSpec(self: SBModuleSpec) -> SBFileSpec: ...
    def GetTriple(self: SBModuleSpec) -> str: ...
    def GetUUIDBytes(self: SBModuleSpec) -> bytes: ...
    def GetUUIDLength(self: SBModuleSpec) -> int: ...
    def IsValid(self: SBModuleSpec) -> bool: ...
    def SetFileSpec(self: SBModuleSpec, fspec: SBFileSpec): ...
    def SetObjectName(self: SBModuleSpec, name: str): ...
    def SetObjectOffset(self: SBModuleSpec, object_offset: int): ...
    def SetObjectSize(self: SBModuleSpec, object_size: int): ...
    def SetPlatformFileSpec(self: SBModuleSpec, fspec: SBFileSpec): ...
    def SetSymbolFileSpec(self: SBModuleSpec, fspec: SBFileSpec): ...
    def SetTriple(self: SBModuleSpec, triple: str): ...
    def SetUUIDBytes(self: SBModuleSpec, uuid: bytes, uuid_len: int) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBModuleSpec: ...
    def __nonzero__(self): ...
    def __repr__(self: SBModuleSpec) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBModuleSpecList(object):
    def Append(self, *args): ...
    def FindFirstMatchingSpec(self: SBModuleSpecList, match_spec: SBModuleSpec) -> SBModuleSpec: ...
    def FindMatchingSpecs(self: SBModuleSpecList, match_spec: SBModuleSpec) -> SBModuleSpecList: ...
    def GetDescription(self: SBModuleSpecList, description: SBStream) -> bool: ...
    @staticmethod
    def GetModuleSpecifications(path: str) -> SBModuleSpecList: ...
    def GetSize(self: SBModuleSpecList) -> int: ...
    def GetSpecAtIndex(self: SBModuleSpecList, i: int) -> SBModuleSpec: ...
    def __init__(self, *args) -> SBModuleSpecList: ...
    def __repr__(self: SBModuleSpecList) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBPlatform(object):
    def Clear(self: SBPlatform): ...
    def ConnectRemote(self: SBPlatform, connect_options: SBPlatformConnectOptions) -> SBError: ...
    def DisconnectRemote(self: SBPlatform): ...
    def Get(self: SBPlatform, src: SBFileSpec, dst: SBFileSpec) -> SBError: ...
    def GetEnvironment(self: SBPlatform) -> SBEnvironment: ...
    def GetFilePermissions(self: SBPlatform, path: str) -> int: ...
    @staticmethod
    def GetHostPlatform() -> SBPlatform: ...
    def GetHostname(self: SBPlatform) -> str: ...
    def GetName(self: SBPlatform) -> str: ...
    def GetOSBuild(self: SBPlatform) -> str: ...
    def GetOSDescription(self: SBPlatform) -> str: ...
    def GetOSMajorVersion(self: SBPlatform) -> int: ...
    def GetOSMinorVersion(self: SBPlatform) -> int: ...
    def GetOSUpdateVersion(self: SBPlatform) -> int: ...
    def GetTriple(self: SBPlatform) -> str: ...
    def GetUnixSignals(self: SBPlatform) -> SBUnixSignals: ...
    def GetWorkingDirectory(self: SBPlatform) -> str: ...
    def Install(self: SBPlatform, src: SBFileSpec, dst: SBFileSpec) -> SBError: ...
    def IsConnected(self: SBPlatform) -> bool: ...
    def IsValid(self: SBPlatform) -> bool: ...
    def Kill(self: SBPlatform, pid: int) -> SBError: ...
    def Launch(self: SBPlatform, launch_info: SBLaunchInfo) -> SBError: ...
    def MakeDirectory(self: SBPlatform, path: str, file_permissions: int = eFilePermissionsDirectoryDefault) -> SBError: ...
    def Put(self: SBPlatform, src: SBFileSpec, dst: SBFileSpec) -> SBError: ...
    def Run(self: SBPlatform, shell_command: SBPlatformShellCommand) -> SBError: ...
    def SetFilePermissions(self: SBPlatform, path: str, file_permissions: int) -> SBError: ...
    def SetLocateModuleCallback(self: SBPlatform, callback: Callable[[any, SBModuleSpec, SBFileSpec, SBFileSpec], SBError]) -> SBError: ...
    def SetSDKRoot(self: SBPlatform, sysroot: str): ...
    def SetWorkingDirectory(self: SBPlatform, path: str) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBPlatform: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBPlatformConnectOptions(object):
    def DisableRsync(self: SBPlatformConnectOptions): ...
    def EnableRsync(self: SBPlatformConnectOptions, options: str, remote_path_prefix: str, omit_remote_hostname: bool): ...
    def GetLocalCacheDirectory(self: SBPlatformConnectOptions) -> str: ...
    def GetRsyncEnabled(self: SBPlatformConnectOptions) -> bool: ...
    def GetURL(self: SBPlatformConnectOptions) -> str: ...
    def SetLocalCacheDirectory(self: SBPlatformConnectOptions, path: str): ...
    def SetURL(self: SBPlatformConnectOptions, url: str): ...
    def __init__(self, *args) -> SBPlatformConnectOptions: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBPlatformShellCommand(object):
    def Clear(self: SBPlatformShellCommand): ...
    def GetCommand(self: SBPlatformShellCommand) -> str: ...
    def GetOutput(self: SBPlatformShellCommand) -> str: ...
    def GetShell(self: SBPlatformShellCommand) -> str: ...
    def GetSignal(self: SBPlatformShellCommand) -> int: ...
    def GetStatus(self: SBPlatformShellCommand) -> int: ...
    def GetTimeoutSeconds(self: SBPlatformShellCommand) -> int: ...
    def GetWorkingDirectory(self: SBPlatformShellCommand) -> str: ...
    def SetCommand(self: SBPlatformShellCommand, shell_command: str): ...
    def SetShell(self: SBPlatformShellCommand, shell: str): ...
    def SetTimeoutSeconds(self: SBPlatformShellCommand, sec: int): ...
    def SetWorkingDirectory(self: SBPlatformShellCommand, path: str): ...
    def __init__(self, *args) -> SBPlatformShellCommand: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBProcess(object):
    class threads_access(object):
        def __getitem__(self, key): ...
        def __init__(self, sbprocess): ...
        def __len__(self): ...
    def AllocateMemory(self, size, permissions, error): ...
    def AppendEventStateReport(self: SBProcess, event: SBEvent, result: SBCommandReturnObject): ...
    def Clear(self: SBProcess): ...
    def Continue(self: SBProcess) -> SBError: ...
    def CreateOSPluginThread(self, tid, context): ...
    def DeallocateMemory(self, ptr): ...
    def Destroy(self: SBProcess) -> SBError: ...
    def Detach(self, *args) -> SBError: ...
    @staticmethod
    def EventIsProcessEvent(event: SBEvent) -> bool: ...
    @staticmethod
    def EventIsStructuredDataEvent(event: SBEvent) -> bool: ...
    def ForceScriptedState(self: SBProcess, new_state: int): ...
    def GetAddressByteSize(self: SBProcess) -> int: ...
    def GetAsyncProfileData(self: SBProcess, dst: str) -> int: ...
    def GetBroadcaster(self: SBProcess) -> SBBroadcaster: ...
    @staticmethod
    def GetBroadcasterClass() -> str: ...
    @staticmethod
    def GetBroadcasterClassName() -> str: ...
    def GetByteOrder(self: SBProcess) -> int: ...
    def GetDescription(self: SBProcess, description: SBStream) -> bool: ...
    def GetExitDescription(self: SBProcess) -> str: ...
    def GetExitStatus(self: SBProcess) -> int: ...
    def GetExtendedBacktraceTypeAtIndex(self, idx): ...
    def GetExtendedCrashInformation(self): ...
    def GetHistoryThreads(self: SBProcess, addr: int) -> SBThreadCollection: ...
    @staticmethod
    def GetInterruptedFromEvent(event: SBEvent) -> bool: ...
    def GetMemoryRegionInfo(self: SBProcess, load_addr: int, region_info: SBMemoryRegionInfo) -> SBError: ...
    def GetMemoryRegions(self: SBProcess) -> SBMemoryRegionInfoList: ...
    def GetNumExtendedBacktraceTypes(self): ...
    def GetNumQueues(self: SBProcess) -> int: ...
    @staticmethod
    def GetNumRestartedReasonsFromEvent(event: SBEvent) -> int: ...
    def GetNumSupportedHardwareWatchpoints(self: SBProcess, error: SBError) -> int: ...
    def GetNumThreads(self: SBProcess) -> int: ...
    def GetPluginName(self: SBProcess) -> str: ...
    @staticmethod
    def GetProcessFromEvent(event: SBEvent) -> SBProcess: ...
    def GetProcessID(self): ...
    def GetProcessInfo(self): ...
    def GetQueueAtIndex(self: SBProcess, index: int) -> SBQueue: ...
    @staticmethod
    def GetRestartedFromEvent(event: SBEvent) -> bool: ...
    @staticmethod
    def GetRestartedReasonAtIndexFromEvent(event: SBEvent, idx: int) -> str: ...
    def GetSTDERR(self, dst): ...
    def GetSTDOUT(self, dst): ...
    def GetScriptedImplementation(self): ...
    def GetSelectedThread(self): ...
    def GetShortPluginName(self: SBProcess) -> str: ...
    def GetState(self: SBProcess) -> int: ...
    @staticmethod
    def GetStateFromEvent(event: SBEvent) -> int: ...
    def GetStopEventForStopID(self: SBProcess, stop_id: int) -> SBEvent: ...
    def GetStopID(self: SBProcess, include_expression_stops: bool = False) -> int: ...
    @staticmethod
    def GetStructuredDataFromEvent(event: SBEvent) -> SBStructuredData: ...
    def GetTarget(self: SBProcess) -> SBTarget: ...
    def GetThreadAtIndex(self, index): ...
    def GetThreadByID(self, sb_thread_id): ...
    def GetThreadByIndexID(self, index_id): ...
    def GetUniqueID(self): ...
    def GetUnixSignals(self: SBProcess) -> SBUnixSignals: ...
    def IsInstrumentationRuntimePresent(self: SBProcess, type: int) -> bool: ...
    def IsValid(self: SBProcess) -> bool: ...
    def Kill(self: SBProcess) -> SBError: ...
    def LoadImage(self, *args) -> int: ...
    def LoadImageUsingPaths(self, image_spec, paths, loaded_path, error): ...
    def PutSTDIN(self, src): ...
    def ReadCStringFromMemory(self, addr, char_buf, error): ...
    def ReadMemory(self, addr, buf, error): ...
    def ReadPointerFromMemory(self, addr, error): ...
    def ReadUnsignedFromMemory(self, addr, byte_size, error): ...
    def RemoteAttachToProcessWithID(self: SBProcess, pid: int, error: SBError) -> bool: ...
    def RemoteLaunch(self: SBProcess, argv: list[str], envp: list[str], stdin_path: str, stdout_path: str, stderr_path: str, working_directory: str, launch_flags: int, stop_at_entry: bool, error: SBError) -> bool: ...
    def ReportEventState(self, *args): ...
    def SaveCore(self, *args) -> SBError: ...
    def SendAsyncInterrupt(self: SBProcess): ...
    def SendEventData(self: SBProcess, data: str) -> SBError: ...
    def SetSelectedThread(self: SBProcess, thread: SBThread) -> bool: ...
    def SetSelectedThreadByID(self: SBProcess, tid: int) -> bool: ...
    def SetSelectedThreadByIndexID(self: SBProcess, index_id: int) -> bool: ...
    def Signal(self: SBProcess, signal: int) -> SBError: ...
    def Stop(self: SBProcess) -> SBError: ...
    def UnloadImage(self: SBProcess, image_token: int) -> SBError: ...
    def WriteMemory(self, addr, buf, error): ...
    def WriteMemoryAsCString(self, addr, str, error): ...
    def __bool__(self): ...
    def __get_is_alive__(self): ...
    def __get_is_running__(self): ...
    def __get_is_stopped__(self): ...
    def __init__(self, *args) -> SBProcess: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __nonzero__(self): ...
    def __repr__(self: SBProcess) -> str: ...
    def get_process_thread_list(self): ...
    def get_threads_access_object(self): ...
    @property
    def broadcaster(self) -> SBBroadcaster: ...
    @property
    def exit_description(self) -> str: ...
    @property
    def exit_state(self) -> int: ...
    @property
    def id(self): ...
    @property
    def is_alive(self): ...
    @property
    def is_running(self): ...
    @property
    def is_stopped(self): ...
    @property
    def num_threads(self) -> int: ...
    @property
    def selected_thread(self): ...
    @selected_thread.setter
    def selected_thread(self, value): ...
    @property
    def state(self) -> int: ...
    @property
    def target(self) -> SBTarget: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def thread(self): ...
    @property
    def threads(self): ...

class SBProcessInfo(object):
    def EffectiveGroupIDIsValid(self: SBProcessInfo) -> bool: ...
    def EffectiveUserIDIsValid(self: SBProcessInfo) -> bool: ...
    def GetEffectiveGroupID(self: SBProcessInfo) -> int: ...
    def GetEffectiveUserID(self: SBProcessInfo) -> int: ...
    def GetExecutableFile(self: SBProcessInfo) -> SBFileSpec: ...
    def GetGroupID(self: SBProcessInfo) -> int: ...
    def GetName(self: SBProcessInfo) -> str: ...
    def GetParentProcessID(self: SBProcessInfo) -> int: ...
    def GetProcessID(self: SBProcessInfo) -> int: ...
    def GetTriple(self: SBProcessInfo) -> str: ...
    def GetUserID(self: SBProcessInfo) -> int: ...
    def GroupIDIsValid(self: SBProcessInfo) -> bool: ...
    def IsValid(self: SBProcessInfo) -> bool: ...
    def UserIDIsValid(self: SBProcessInfo) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBProcessInfo: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBQueue(object):
    def Clear(self: SBQueue): ...
    def GetIndexID(self: SBQueue) -> int: ...
    def GetKind(self): ...
    def GetName(self: SBQueue) -> str: ...
    def GetNumPendingItems(self: SBQueue) -> int: ...
    def GetNumRunningItems(self: SBQueue) -> int: ...
    def GetNumThreads(self: SBQueue) -> int: ...
    def GetPendingItemAtIndex(self: SBQueue, arg2: int) -> SBQueueItem: ...
    def GetProcess(self: SBQueue) -> SBProcess: ...
    def GetQueueID(self): ...
    def GetThreadAtIndex(self: SBQueue, arg2: int) -> SBThread: ...
    def IsValid(self: SBQueue) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBQueue: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBQueueItem(object):
    def Clear(self: SBQueueItem): ...
    def GetAddress(self: SBQueueItem) -> SBAddress: ...
    def GetExtendedBacktraceThread(self: SBQueueItem, type: str) -> SBThread: ...
    def GetKind(self: SBQueueItem) -> int: ...
    def IsValid(self: SBQueueItem) -> bool: ...
    def SetAddress(self: SBQueueItem, addr: SBAddress): ...
    def SetKind(self: SBQueueItem, kind: int): ...
    def __bool__(self): ...
    def __init__(self: SBQueueItem) -> SBQueueItem: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBReproducer(object):
    @staticmethod
    def Capture(path: str) -> str: ...
    @staticmethod
    def PassiveReplay(path: str) -> str: ...
    @staticmethod
    def SetAutoGenerate(b: bool) -> bool: ...
    @staticmethod
    def SetWorkingDirectory(path: str): ...
    def __init__(self: SBReproducer) -> SBReproducer: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBScriptObject(object):
    def GetLanguage(self: SBScriptObject) -> int: ...
    def GetPointer(self: SBScriptObject) -> ScriptObjectPtr: ...
    def IsValid(self: SBScriptObject) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBScriptObject: ...
    def __ne__(self: SBScriptObject, rhs: SBScriptObject) -> bool: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def lang(self) -> int: ...
    @property
    def ptr(self) -> ScriptObjectPtr: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBSection(object):
    def FindSubSection(self: SBSection, sect_name: str) -> SBSection: ...
    def GetAlignment(self: SBSection) -> int: ...
    def GetByteSize(self: SBSection) -> int: ...
    def GetDescription(self: SBSection, description: SBStream) -> bool: ...
    def GetFileAddress(self: SBSection) -> int: ...
    def GetFileByteSize(self: SBSection) -> int: ...
    def GetFileOffset(self: SBSection) -> int: ...
    def GetLoadAddress(self: SBSection, target: SBTarget) -> int: ...
    def GetName(self: SBSection) -> str: ...
    def GetNumSubSections(self: SBSection) -> int: ...
    def GetParent(self: SBSection) -> SBSection: ...
    def GetPermissions(self: SBSection) -> int: ...
    def GetSectionData(self, *args) -> SBData: ...
    def GetSectionType(self: SBSection) -> int: ...
    def GetSubSectionAtIndex(self: SBSection, idx: int) -> SBSection: ...
    def GetTargetByteSize(self: SBSection) -> int: ...
    def IsValid(self: SBSection) -> bool: ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBSection: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBSection) -> str: ...
    def get_addr(self): ...
    @property
    def addr(self): ...
    @property
    def alignment(self) -> int: ...
    @property
    def data(self) -> SBData: ...
    @property
    def file_addr(self) -> int: ...
    @property
    def file_offset(self) -> int: ...
    @property
    def file_size(self) -> int: ...
    @property
    def name(self) -> str: ...
    @property
    def size(self) -> int: ...
    @property
    def target_byte_size(self) -> int: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def type(self) -> int: ...

class SBSourceManager(object):
    def DisplaySourceLinesWithLineNumbers(self: SBSourceManager, file: SBFileSpec, line: int, context_before: int, context_after: int, current_line_cstr: str, s: SBStream) -> int: ...
    def DisplaySourceLinesWithLineNumbersAndColumn(self: SBSourceManager, file: SBFileSpec, line: int, column: int, context_before: int, context_after: int, current_line_cstr: str, s: SBStream) -> int: ...
    def __init__(self, *args) -> SBSourceManager: ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBStream(object):
    def Clear(self: SBStream): ...
    def GetData(self: SBStream) -> str: ...
    def GetSize(self: SBStream) -> int: ...
    def IsValid(self: SBStream) -> bool: ...
    def Print(self: SBStream, str: str): ...
    def RedirectToFile(self, *args): ...
    def RedirectToFileDescriptor(self: SBStream, fd: int, transfer_fh_ownership: bool): ...
    def RedirectToFileHandle(self, file, transfer_fh_ownership): ...
    def __bool__(self): ...
    def __init__(self: SBStream) -> SBStream: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    def flush(self: SBStream): ...
    def write(self: SBStream, str: str): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBStringList(object):
    def AppendList(self, *args): ...
    def AppendString(self: SBStringList, str: str): ...
    def Clear(self: SBStringList): ...
    def GetSize(self: SBStringList) -> int: ...
    def GetStringAtIndex(self, *args) -> int: ...
    def IsValid(self: SBStringList) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBStringList: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBStructuredData(object):
    def Clear(self: SBStructuredData): ...
    def GetAsJSON(self: SBStructuredData, stream: SBStream) -> SBError: ...
    def GetBooleanValue(self: SBStructuredData, fail_value: bool = False) -> bool: ...
    def GetDescription(self: SBStructuredData, stream: SBStream) -> SBError: ...
    def GetFloatValue(self: SBStructuredData, fail_value: float = 0.0) -> float: ...
    def GetGenericValue(self: SBStructuredData) -> SBScriptObject: ...
    def GetIntegerValue(self: SBStructuredData, fail_value: int = 0) -> int: ...
    def GetItemAtIndex(self: SBStructuredData, idx: int) -> SBStructuredData: ...
    def GetKeys(self: SBStructuredData, keys: SBStringList) -> bool: ...
    def GetSignedIntegerValue(self: SBStructuredData, fail_value: int = 0) -> int: ...
    def GetSize(self: SBStructuredData) -> int: ...
    def GetStringValue(self: SBStructuredData, dst: str) -> int: ...
    def GetType(self: SBStructuredData) -> int: ...
    def GetUnsignedIntegerValue(self: SBStructuredData, fail_value: int = 0) -> int: ...
    def GetValueForKey(self: SBStructuredData, key: str) -> SBStructuredData: ...
    def IsValid(self: SBStructuredData) -> bool: ...
    def SetFromJSON(self, *args) -> SBError: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBStructuredData: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBSymbol(object):
    def GetDescription(self: SBSymbol, description: SBStream) -> bool: ...
    def GetDisplayName(self: SBSymbol) -> str: ...
    def GetEndAddress(self: SBSymbol) -> SBAddress: ...
    def GetInstructions(self, *args) -> SBInstructionList: ...
    def GetMangledName(self: SBSymbol) -> str: ...
    def GetName(self: SBSymbol) -> str: ...
    def GetPrologueByteSize(self: SBSymbol) -> int: ...
    def GetSize(self: SBSymbol) -> int: ...
    def GetStartAddress(self: SBSymbol) -> SBAddress: ...
    def GetType(self: SBSymbol) -> int: ...
    def GetValue(self: SBSymbol) -> int: ...
    def IsExternal(self: SBSymbol) -> bool: ...
    def IsSynthetic(self: SBSymbol) -> bool: ...
    def IsValid(self: SBSymbol) -> bool: ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBSymbol: ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBSymbol) -> str: ...
    def get_instructions_from_current_target(self): ...
    @property
    def addr(self) -> SBAddress: ...
    @property
    def end_addr(self) -> SBAddress: ...
    @property
    def external(self) -> bool: ...
    @property
    def instructions(self): ...
    @property
    def mangled(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def prologue_size(self) -> int: ...
    @property
    def synthetic(self) -> bool: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def type(self) -> int: ...

class SBSymbolContext(object):
    def GetBlock(self: SBSymbolContext) -> SBBlock: ...
    def GetCompileUnit(self: SBSymbolContext) -> SBCompileUnit: ...
    def GetDescription(self: SBSymbolContext, description: SBStream) -> bool: ...
    def GetFunction(self: SBSymbolContext) -> SBFunction: ...
    def GetLineEntry(self: SBSymbolContext) -> SBLineEntry: ...
    def GetModule(self: SBSymbolContext) -> SBModule: ...
    def GetParentOfInlinedScope(self: SBSymbolContext, curr_frame_pc: SBAddress, parent_frame_addr: SBAddress) -> SBSymbolContext: ...
    def GetSymbol(self: SBSymbolContext) -> SBSymbol: ...
    def IsValid(self: SBSymbolContext) -> bool: ...
    def SetBlock(self: SBSymbolContext, block: SBBlock): ...
    def SetCompileUnit(self: SBSymbolContext, compile_unit: SBCompileUnit): ...
    def SetFunction(self: SBSymbolContext, function: SBFunction): ...
    def SetLineEntry(self: SBSymbolContext, line_entry: SBLineEntry): ...
    def SetModule(self: SBSymbolContext, module: SBModule): ...
    def SetSymbol(self: SBSymbolContext, symbol: SBSymbol): ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBSymbolContext: ...
    def __nonzero__(self): ...
    def __repr__(self: SBSymbolContext) -> str: ...
    @property
    def block(self) -> SBBlock: ...
    @block.setter
    def block(self, value:SBBlock): ...
    @property
    def compile_unit(self) -> SBCompileUnit: ...
    @compile_unit.setter
    def compile_unit(self, value:SBCompileUnit): ...
    @property
    def function(self) -> SBFunction: ...
    @function.setter
    def function(self, value:SBFunction): ...
    @property
    def line_entry(self) -> SBLineEntry: ...
    @line_entry.setter
    def line_entry(self, value:SBLineEntry): ...
    @property
    def module(self) -> SBModule: ...
    @module.setter
    def module(self, value:SBModule): ...
    @property
    def symbol(self) -> SBSymbol: ...
    @symbol.setter
    def symbol(self, value:SBSymbol): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBSymbolContextList(object):
    def Append(self, *args): ...
    def Clear(self: SBSymbolContextList): ...
    def GetContextAtIndex(self: SBSymbolContextList, idx: int) -> SBSymbolContext: ...
    def GetDescription(self: SBSymbolContextList, description: SBStream) -> bool: ...
    def GetSize(self: SBSymbolContextList) -> int: ...
    def IsValid(self: SBSymbolContextList) -> bool: ...
    def __bool__(self): ...
    def __getitem__(self, key): ...
    def __init__(self, *args) -> SBSymbolContextList: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __nonzero__(self): ...
    def __repr__(self: SBSymbolContextList) -> str: ...
    def get_block_array(self): ...
    def get_compile_unit_array(self): ...
    def get_function_array(self): ...
    def get_line_entry_array(self): ...
    def get_module_array(self): ...
    def get_symbol_array(self): ...
    @property
    def blocks(self): ...
    @property
    def compile_units(self): ...
    @property
    def functions(self): ...
    @property
    def line_entries(self): ...
    @property
    def modules(self): ...
    @property
    def symbols(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBSyntheticValueProvider(object):
    def __init__(self, valobj): ...
    def get_child_at_index(self, idx): ...
    def get_child_index(self, name): ...
    def has_children(self): ...
    def num_children(self): ...
    def update(self): ...

class SBTarget(object):
    class bkpts_access(object):
        def __getitem__(self, key): ...
        def __init__(self, sbtarget): ...
        def __len__(self): ...
    class modules_access(object):
        def __getitem__(self, key): ...
        def __init__(self, sbtarget): ...
        def __len__(self): ...
    class watchpoints_access(object):
        def __getitem__(self, key): ...
        def __init__(self, sbtarget): ...
        def __len__(self): ...
    def AddModule(self, *args) -> bool: ...
    def AppendImageSearchPath(self: SBTarget, _from: str, to: str, error: SBError): ...
    def Attach(self: SBTarget, attach_info: SBAttachInfo, error: SBError) -> SBProcess: ...
    def AttachToProcessWithID(self: SBTarget, listener: SBListener, pid: int, error: SBError) -> SBProcess: ...
    def AttachToProcessWithName(self: SBTarget, listener: SBListener, name: str, wait_for: bool, error: SBError) -> SBProcess: ...
    def BreakpointCreateByAddress(self: SBTarget, address: int) -> SBBreakpoint: ...
    def BreakpointCreateByLocation(self, *args) -> SBBreakpoint: ...
    def BreakpointCreateByName(self, *args) -> SBBreakpoint: ...
    def BreakpointCreateByNames(self, *args) -> SBBreakpoint: ...
    def BreakpointCreateByRegex(self, *args) -> SBBreakpoint: ...
    def BreakpointCreateBySBAddress(self: SBTarget, address: SBAddress) -> SBBreakpoint: ...
    def BreakpointCreateBySourceRegex(self, *args) -> SBBreakpoint: ...
    def BreakpointCreateForException(self: SBTarget, language: int, catch_bp: bool, throw_bp: bool) -> SBBreakpoint: ...
    def BreakpointCreateFromScript(self: SBTarget, class_name: str, extra_args: SBStructuredData, module_list: SBFileSpecList, file_list: SBFileSpecList, request_hardware: bool = False) -> SBBreakpoint: ...
    def BreakpointDelete(self: SBTarget, break_id: int) -> bool: ...
    def BreakpointsCreateFromFile(self, *args) -> SBError: ...
    def BreakpointsWriteToFile(self, *args) -> SBError: ...
    def Clear(self: SBTarget): ...
    def ClearModuleLoadAddress(self: SBTarget, module: SBModule) -> SBError: ...
    def ClearSectionLoadAddress(self: SBTarget, section: SBSection) -> SBError: ...
    def ConnectRemote(self: SBTarget, listener: SBListener, url: str, plugin_name: str, error: SBError) -> SBProcess: ...
    def CreateTrace(self: SBTarget, error: SBError) -> SBTrace: ...
    def CreateValueFromAddress(self: SBTarget, name: str, addr: SBAddress, type: SBType) -> SBValue: ...
    def CreateValueFromData(self: SBTarget, name: str, data: SBData, type: SBType) -> SBValue: ...
    def CreateValueFromExpression(self: SBTarget, name: str, expr: str) -> SBValue: ...
    def DeleteAllBreakpoints(self: SBTarget) -> bool: ...
    def DeleteAllWatchpoints(self: SBTarget) -> bool: ...
    def DeleteBreakpointName(self: SBTarget, name: str): ...
    def DeleteWatchpoint(self: SBTarget, watch_id: int) -> bool: ...
    def DisableAllBreakpoints(self: SBTarget) -> bool: ...
    def DisableAllWatchpoints(self: SBTarget) -> bool: ...
    def EnableAllBreakpoints(self: SBTarget) -> bool: ...
    def EnableAllWatchpoints(self: SBTarget) -> bool: ...
    def EvaluateExpression(self, *args) -> SBValue: ...
    @staticmethod
    def EventIsTargetEvent(event: SBEvent) -> bool: ...
    def FindBreakpointByID(self: SBTarget, break_id: int) -> SBBreakpoint: ...
    def FindBreakpointsByName(self: SBTarget, name: str, bkpt_list: SBBreakpointList) -> bool: ...
    def FindCompileUnits(self: SBTarget, sb_file_spec: SBFileSpec) -> SBSymbolContextList: ...
    def FindFirstGlobalVariable(self: SBTarget, name: str) -> SBValue: ...
    def FindFirstType(self: SBTarget, type: str) -> SBType: ...
    def FindFunctions(self: SBTarget, name: str, name_type_mask: int = eFunctionNameTypeAny) -> SBSymbolContextList: ...
    def FindGlobalFunctions(self: SBTarget, name: str, max_matches: int, matchtype: int) -> SBSymbolContextList: ...
    def FindGlobalVariables(self, *args) -> SBValueList: ...
    def FindModule(self: SBTarget, file_spec: SBFileSpec) -> SBModule: ...
    def FindSymbols(self: SBTarget, name: str, type: int = eSymbolTypeAny) -> SBSymbolContextList: ...
    def FindTypes(self: SBTarget, type: str) -> SBTypeList: ...
    def FindWatchpointByID(self: SBTarget, watch_id: int) -> SBWatchpoint: ...
    def GetABIName(self: SBTarget) -> str: ...
    def GetAddressByteSize(self: SBTarget) -> int: ...
    def GetBasicType(self: SBTarget, type: int) -> SBType: ...
    def GetBreakpointAtIndex(self: SBTarget, idx: int) -> SBBreakpoint: ...
    def GetBreakpointNames(self: SBTarget, names: SBStringList): ...
    def GetBroadcaster(self: SBTarget) -> SBBroadcaster: ...
    @staticmethod
    def GetBroadcasterClassName() -> str: ...
    def GetByteOrder(self: SBTarget) -> int: ...
    def GetCodeByteSize(self: SBTarget) -> int: ...
    def GetCollectingStats(self: SBTarget) -> bool: ...
    def GetDataByteSize(self: SBTarget) -> int: ...
    def GetDebugger(self: SBTarget) -> SBDebugger: ...
    def GetDescription(self: SBTarget, description: SBStream, description_level: int) -> bool: ...
    def GetEnvironment(self: SBTarget) -> SBEnvironment: ...
    def GetExecutable(self: SBTarget) -> SBFileSpec: ...
    def GetInstructions(self: SBTarget, base_addr: SBAddress, buf: bytes) -> SBInstructionList: ...
    def GetInstructionsWithFlavor(self: SBTarget, base_addr: SBAddress, flavor_string: str, buf: bytes) -> SBInstructionList: ...
    def GetLabel(self: SBTarget) -> str: ...
    def GetLaunchInfo(self: SBTarget) -> SBLaunchInfo: ...
    def GetMaximumNumberOfChildrenToDisplay(self: SBTarget) -> int: ...
    def GetModuleAtIndex(self: SBTarget, idx: int) -> SBModule: ...
    @staticmethod
    def GetModuleAtIndexFromEvent(idx: int, event: SBEvent) -> SBModule: ...
    def GetNumBreakpoints(self: SBTarget) -> int: ...
    def GetNumModules(self: SBTarget) -> int: ...
    @staticmethod
    def GetNumModulesFromEvent(event: SBEvent) -> int: ...
    def GetNumWatchpoints(self: SBTarget) -> int: ...
    def GetPlatform(self: SBTarget) -> SBPlatform: ...
    def GetProcess(self: SBTarget) -> SBProcess: ...
    def GetSourceManager(self: SBTarget) -> SBSourceManager: ...
    def GetStackRedZoneSize(self: SBTarget) -> int: ...
    def GetStatistics(self: SBTarget) -> SBStructuredData: ...
    @staticmethod
    def GetTargetFromEvent(event: SBEvent) -> SBTarget: ...
    def GetTrace(self: SBTarget) -> SBTrace: ...
    def GetTriple(self: SBTarget) -> str: ...
    def GetWatchpointAtIndex(self: SBTarget, idx: int) -> SBWatchpoint: ...
    def Install(self: SBTarget) -> SBError: ...
    def IsLoaded(self: SBTarget, module: SBModule) -> bool: ...
    def IsValid(self: SBTarget) -> bool: ...
    def Launch(self, *args) -> SBProcess: ...
    def LaunchSimple(self: SBTarget, argv: list[str], envp: list[str], working_directory: str) -> SBProcess: ...
    def LoadCore(self, *args) -> SBProcess: ...
    def ReadInstructions(self, *args) -> SBInstructionList: ...
    def ReadMemory(self: SBTarget, addr: SBAddress, buf: bytes, error: SBError) -> int: ...
    def RemoveModule(self: SBTarget, module: SBModule) -> bool: ...
    def ResolveFileAddress(self: SBTarget, file_addr: int) -> SBAddress: ...
    def ResolveLoadAddress(self: SBTarget, vm_addr: int) -> SBAddress: ...
    def ResolvePastLoadAddress(self: SBTarget, stop_id: int, vm_addr: int) -> SBAddress: ...
    def ResolveSymbolContextForAddress(self: SBTarget, addr: SBAddress, resolve_scope: int) -> SBSymbolContext: ...
    def SetCollectingStats(self: SBTarget, v: bool): ...
    def SetLabel(self: SBTarget, label: str) -> SBError: ...
    def SetLaunchInfo(self: SBTarget, launch_info: SBLaunchInfo): ...
    def SetModuleLoadAddress(self: SBTarget, module: SBModule, sections_offset: int) -> SBError: ...
    def SetSectionLoadAddress(self: SBTarget, section: SBSection, section_base_addr: int) -> SBError: ...
    def WatchAddress(self: SBTarget, addr: int, size: int, read: bool, write: bool, error: SBError) -> SBWatchpoint: ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBTarget: ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBTarget) -> str: ...
    def breakpoint_iter(self): ...
    def get_bkpts_access_object(self): ...
    def get_modules_access_object(self): ...
    def get_modules_array(self): ...
    def get_target_bkpts(self): ...
    def get_target_watchpoints(self): ...
    def get_watchpoints_access_object(self): ...
    def module_iter(self): ...
    def watchpoint_iter(self): ...
    @property
    def addr_size(self) -> int: ...
    @property
    def breakpoint(self): ...
    @property
    def breakpoints(self): ...
    @property
    def broadcaster(self) -> SBBroadcaster: ...
    @property
    def byte_order(self) -> int: ...
    @property
    def code_byte_size(self) -> int: ...
    @property
    def data_byte_size(self) -> int: ...
    @property
    def debugger(self) -> SBDebugger: ...
    @property
    def executable(self) -> SBFileSpec: ...
    @property
    def module(self): ...
    @property
    def modules(self): ...
    @property
    def num_breakpoints(self) -> int: ...
    @property
    def num_watchpoints(self) -> int: ...
    @property
    def platform(self) -> SBPlatform: ...
    @property
    def process(self) -> SBProcess: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def triple(self) -> str: ...
    @property
    def watchpoint(self): ...
    @property
    def watchpoints(self): ...

class SBThread(object):
    class frames_access(object):
        def __getitem__(self, key): ...
        def __init__(self, sbthread): ...
        def __len__(self): ...
    def Clear(self: SBThread): ...
    @staticmethod
    def EventIsThreadEvent(event: SBEvent) -> bool: ...
    @staticmethod
    def GetBroadcasterClassName() -> str: ...
    def GetCurrentException(self): ...
    def GetCurrentExceptionBacktrace(self): ...
    def GetDescription(self, *args) -> bool: ...
    def GetExtendedBacktraceOriginatingIndexID(self): ...
    def GetExtendedBacktraceThread(self, type): ...
    def GetFrameAtIndex(self: SBThread, idx: int) -> SBFrame: ...
    def GetIndexID(self): ...
    def GetInfoItemByPathAsString(self: SBThread, path: str, strm: SBStream) -> bool: ...
    def GetName(self: SBThread) -> str: ...
    def GetNumFrames(self: SBThread) -> int: ...
    def GetProcess(self: SBThread) -> SBProcess: ...
    def GetQueue(self): ...
    def GetQueueID(self): ...
    def GetQueueName(self): ...
    def GetSelectedFrame(self: SBThread) -> SBFrame: ...
    def GetSiginfo(self): ...
    @staticmethod
    def GetStackFrameFromEvent(event: SBEvent) -> SBFrame: ...
    def GetStatus(self: SBThread, status: SBStream) -> bool: ...
    def GetStopDescription(self, dst_or_null): ...
    def GetStopReason(self: SBThread) -> int: ...
    def GetStopReasonDataAtIndex(self: SBThread, idx: int) -> int: ...
    def GetStopReasonDataCount(self: SBThread) -> int: ...
    def GetStopReasonExtendedBacktraces(self, type): ...
    def GetStopReasonExtendedInfoAsJSON(self, stream): ...
    def GetStopReturnValue(self: SBThread) -> SBValue: ...
    @staticmethod
    def GetThreadFromEvent(event: SBEvent) -> SBThread: ...
    def GetThreadID(self): ...
    def IsStopped(self: SBThread) -> bool: ...
    def IsSuspended(self: SBThread) -> bool: ...
    def IsValid(self: SBThread) -> bool: ...
    def JumpToLine(self: SBThread, file_spec: SBFileSpec, line: int) -> SBError: ...
    def Resume(self, *args) -> bool: ...
    def ReturnFromFrame(self, frame, return_value): ...
    def RunToAddress(self, *args): ...
    def SafeToCallFunctions(self): ...
    def SetSelectedFrame(self: SBThread, frame_idx: int) -> SBFrame: ...
    def StepInstruction(self, *args): ...
    def StepInto(self, *args): ...
    def StepOut(self, *args): ...
    def StepOutOfFrame(self, *args): ...
    def StepOver(self, *args): ...
    def StepOverUntil(self: SBThread, frame: SBFrame, file_spec: SBFileSpec, line: int) -> SBError: ...
    def StepUsingScriptedThreadPlan(self, *args) -> SBError: ...
    def Suspend(self, *args) -> bool: ...
    def UnwindInnermostExpression(self): ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBThread: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBThread) -> str: ...
    def get_frames_access_object(self): ...
    def get_thread_frames(self): ...
    @property
    def frame(self): ...
    @property
    def frames(self): ...
    @property
    def id(self): ...
    @property
    def idx(self): ...
    @property
    def is_stopped(self) -> bool: ...
    @property
    def is_suspended(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def num_frames(self) -> int: ...
    @property
    def process(self) -> SBProcess: ...
    @property
    def queue(self): ...
    @property
    def queue_id(self): ...
    @property
    def return_value(self) -> SBValue: ...
    @property
    def stop_reason(self) -> int: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBThreadCollection(object):
    def GetSize(self: SBThreadCollection) -> int: ...
    def GetThreadAtIndex(self: SBThreadCollection, idx: int) -> SBThread: ...
    def IsValid(self: SBThreadCollection) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBThreadCollection: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBThreadPlan(object):
    def Clear(self: SBThreadPlan): ...
    def GetDescription(self: SBThreadPlan, description: SBStream) -> bool: ...
    def GetStopOthers(self: SBThreadPlan) -> bool: ...
    def GetStopReason(self: SBThreadPlan) -> int: ...
    def GetStopReasonDataAtIndex(self: SBThreadPlan, idx: int) -> int: ...
    def GetStopReasonDataCount(self: SBThreadPlan) -> int: ...
    def GetThread(self: SBThreadPlan) -> SBThread: ...
    def IsPlanComplete(self: SBThreadPlan) -> bool: ...
    def IsPlanStale(self: SBThreadPlan) -> bool: ...
    def IsValid(self, *args) -> bool: ...
    def QueueThreadPlanForRunToAddress(self, *args) -> SBThreadPlan: ...
    def QueueThreadPlanForStepInRange(self, *args) -> SBThreadPlan: ...
    def QueueThreadPlanForStepOut(self, *args) -> SBThreadPlan: ...
    def QueueThreadPlanForStepOverRange(self, *args) -> SBThreadPlan: ...
    def QueueThreadPlanForStepScripted(self, *args) -> SBThreadPlan: ...
    def SetPlanComplete(self: SBThreadPlan, success: bool): ...
    def SetStopOthers(self: SBThreadPlan, stop_others: bool): ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBThreadPlan: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBTrace(object):
    def CreateNewCursor(self: SBTrace, error: SBError, thread: SBThread) -> SBTraceCursor: ...
    def GetStartConfigurationHelp(self: SBTrace) -> str: ...
    def IsValid(self: SBTrace) -> bool: ...
    @staticmethod
    def LoadTraceFromFile(error: SBError, debugger: SBDebugger, trace_description_file: SBFileSpec) -> SBTrace: ...
    def SaveToDisk(self: SBTrace, error: SBError, bundle_dir: SBFileSpec, compact: bool = False) -> SBFileSpec: ...
    def Start(self, *args) -> SBError: ...
    def Stop(self, *args) -> SBError: ...
    def __bool__(self): ...
    def __init__(self: SBTrace) -> SBTrace: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBTraceCursor(object):
    def GetCPU(self: SBTraceCursor) -> int: ...
    def GetError(self: SBTraceCursor) -> str: ...
    def GetEventType(self: SBTraceCursor) -> int: ...
    def GetEventTypeAsString(self: SBTraceCursor) -> str: ...
    def GetId(self: SBTraceCursor) -> int: ...
    def GetItemKind(self: SBTraceCursor) -> int: ...
    def GetLoadAddress(self: SBTraceCursor) -> int: ...
    def GoToId(self: SBTraceCursor, id: int) -> bool: ...
    def HasId(self: SBTraceCursor, id: int) -> bool: ...
    def HasValue(self: SBTraceCursor) -> bool: ...
    def IsError(self: SBTraceCursor) -> bool: ...
    def IsEvent(self: SBTraceCursor) -> bool: ...
    def IsForwards(self: SBTraceCursor) -> bool: ...
    def IsInstruction(self: SBTraceCursor) -> bool: ...
    def IsValid(self: SBTraceCursor) -> bool: ...
    def Next(self: SBTraceCursor): ...
    def Seek(self: SBTraceCursor, offset: int, origin: int) -> bool: ...
    def SetForwards(self: SBTraceCursor, forwards: bool): ...
    def __bool__(self): ...
    def __init__(self: SBTraceCursor) -> SBTraceCursor: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBType(object):
    def GetArrayElementType(self: SBType) -> SBType: ...
    def GetArrayType(self: SBType, size: int) -> SBType: ...
    def GetBasicType(self, *args) -> int: ...
    def GetByteSize(self: SBType) -> int: ...
    def GetCanonicalType(self: SBType) -> SBType: ...
    def GetDereferencedType(self: SBType) -> SBType: ...
    def GetDescription(self: SBType, description: SBStream, description_level: int) -> bool: ...
    def GetDirectBaseClassAtIndex(self: SBType, idx: int) -> SBTypeMember: ...
    def GetDisplayTypeName() -> str: ...
    def GetEnumMembers(self: SBType) -> SBTypeEnumMemberList: ...
    def GetEnumerationIntegerType(self: SBType) -> SBType: ...
    def GetFieldAtIndex(self: SBType, idx: int) -> SBTypeMember: ...
    def GetFunctionArgumentTypes(self: SBType) -> SBTypeList: ...
    def GetFunctionReturnType(self: SBType) -> SBType: ...
    def GetMemberFunctionAtIndex(self: SBType, idx: int) -> SBTypeMemberFunction: ...
    def GetModule(self: SBType) -> SBModule: ...
    def GetName() -> str: ...
    def GetNumberOfDirectBaseClasses(self: SBType) -> int: ...
    def GetNumberOfFields(self: SBType) -> int: ...
    def GetNumberOfMemberFunctions(self: SBType) -> int: ...
    def GetNumberOfTemplateArguments(self: SBType) -> int: ...
    def GetNumberOfVirtualBaseClasses(self: SBType) -> int: ...
    def GetPointeeType(self: SBType) -> SBType: ...
    def GetPointerType(self: SBType) -> SBType: ...
    def GetReferenceType(self: SBType) -> SBType: ...
    def GetTemplateArgumentKind(self: SBType, idx: int) -> int: ...
    def GetTemplateArgumentType(self: SBType, idx: int) -> SBType: ...
    def GetTypeClass() -> int: ...
    def GetTypeFlags(self: SBType) -> int: ...
    def GetTypedefedType(self: SBType) -> SBType: ...
    def GetUnqualifiedType(self: SBType) -> SBType: ...
    def GetVectorElementType(self: SBType) -> SBType: ...
    def GetVirtualBaseClassAtIndex(self: SBType, idx: int) -> SBTypeMember: ...
    def IsAggregateType(self: SBType) -> bool: ...
    def IsAnonymousType(self: SBType) -> bool: ...
    def IsArrayType(self: SBType) -> bool: ...
    def IsFunctionType(self: SBType) -> bool: ...
    def IsPointerType(self: SBType) -> bool: ...
    def IsPolymorphicClass(self: SBType) -> bool: ...
    def IsReferenceType(self: SBType) -> bool: ...
    def IsScopedEnumerationType(self: SBType) -> bool: ...
    def IsTypeComplete(self: SBType) -> bool: ...
    def IsTypedefType(self: SBType) -> bool: ...
    def IsValid(self: SBType) -> bool: ...
    def IsVectorType(self: SBType) -> bool: ...
    def __bool__(self): ...
    def __eq__(self: SBType, rhs: SBType) -> bool: ...
    def __init__(self, *args) -> SBType: ...
    def __ne__(self: SBType, rhs: SBType) -> bool: ...
    def __nonzero__(self): ...
    def __repr__(self: SBType) -> str: ...
    def get_bases_array(self): ...
    def get_enum_members_array(self): ...
    def get_fields_array(self): ...
    def get_members_array(self): ...
    def get_vbases_array(self): ...
    def template_arg_array(self): ...
    @property
    def bases(self): ...
    @property
    def enum_members(self): ...
    @property
    def fields(self): ...
    @property
    def is_complete(self) -> bool: ...
    @property
    def is_pointer(self) -> bool: ...
    @property
    def is_reference(self) -> bool: ...
    @property
    def members(self): ...
    @property
    def module(self) -> SBModule: ...
    @property
    def name(self) -> str: ...
    @property
    def num_bases(self) -> int: ...
    @property
    def num_fields(self) -> int: ...
    @property
    def num_template_args(self) -> int: ...
    @property
    def num_vbases(self) -> int: ...
    @property
    def size(self) -> int: ...
    @property
    def template_args(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def type(self) -> int: ...
    @property
    def vbases(self): ...

class SBTypeCategory(object):
    class formatters_access_class(object):
        def __getitem__(self, key): ...
        def __init__(self, sbcategory, get_count_function, get_at_index_function, get_by_name_function): ...
        def __len__(self): ...
    def AddLanguage(self: SBTypeCategory, language: int): ...
    def AddTypeFilter(self: SBTypeCategory, arg2: SBTypeNameSpecifier, arg3: SBTypeFilter) -> bool: ...
    def AddTypeFormat(self: SBTypeCategory, arg2: SBTypeNameSpecifier, arg3: SBTypeFormat) -> bool: ...
    def AddTypeSummary(self: SBTypeCategory, arg2: SBTypeNameSpecifier, arg3: SBTypeSummary) -> bool: ...
    def AddTypeSynthetic(self: SBTypeCategory, arg2: SBTypeNameSpecifier, arg3: SBTypeSynthetic) -> bool: ...
    def DeleteTypeFilter(self: SBTypeCategory, arg2: SBTypeNameSpecifier) -> bool: ...
    def DeleteTypeFormat(self: SBTypeCategory, arg2: SBTypeNameSpecifier) -> bool: ...
    def DeleteTypeSummary(self: SBTypeCategory, arg2: SBTypeNameSpecifier) -> bool: ...
    def DeleteTypeSynthetic(self: SBTypeCategory, arg2: SBTypeNameSpecifier) -> bool: ...
    def GetDescription(self: SBTypeCategory, description: SBStream, description_level: int) -> bool: ...
    def GetEnabled(self: SBTypeCategory) -> bool: ...
    def GetFilterAtIndex(self: SBTypeCategory, arg2: int) -> SBTypeFilter: ...
    def GetFilterForType(self: SBTypeCategory, arg2: SBTypeNameSpecifier) -> SBTypeFilter: ...
    def GetFormatAtIndex(self: SBTypeCategory, arg2: int) -> SBTypeFormat: ...
    def GetFormatForType(self: SBTypeCategory, arg2: SBTypeNameSpecifier) -> SBTypeFormat: ...
    def GetLanguageAtIndex(self: SBTypeCategory, idx: int) -> int: ...
    def GetName(self: SBTypeCategory) -> str: ...
    def GetNumFilters(self: SBTypeCategory) -> int: ...
    def GetNumFormats(self: SBTypeCategory) -> int: ...
    def GetNumLanguages(self: SBTypeCategory) -> int: ...
    def GetNumSummaries(self: SBTypeCategory) -> int: ...
    def GetNumSynthetics(self: SBTypeCategory) -> int: ...
    def GetSummaryAtIndex(self: SBTypeCategory, arg2: int) -> SBTypeSummary: ...
    def GetSummaryForType(self: SBTypeCategory, arg2: SBTypeNameSpecifier) -> SBTypeSummary: ...
    def GetSyntheticAtIndex(self: SBTypeCategory, arg2: int) -> SBTypeSynthetic: ...
    def GetSyntheticForType(self: SBTypeCategory, arg2: SBTypeNameSpecifier) -> SBTypeSynthetic: ...
    def GetTypeNameSpecifierForFilterAtIndex(self: SBTypeCategory, arg2: int) -> SBTypeNameSpecifier: ...
    def GetTypeNameSpecifierForFormatAtIndex(self: SBTypeCategory, arg2: int) -> SBTypeNameSpecifier: ...
    def GetTypeNameSpecifierForSummaryAtIndex(self: SBTypeCategory, arg2: int) -> SBTypeNameSpecifier: ...
    def GetTypeNameSpecifierForSyntheticAtIndex(self: SBTypeCategory, arg2: int) -> SBTypeNameSpecifier: ...
    def IsValid(self: SBTypeCategory) -> bool: ...
    def SetEnabled(self: SBTypeCategory, arg2: bool): ...
    def __bool__(self): ...
    def __eq__(self: SBTypeCategory, rhs: SBTypeCategory) -> bool: ...
    def __init__(self, *args) -> SBTypeCategory: ...
    def __ne__(self: SBTypeCategory, rhs: SBTypeCategory) -> bool: ...
    def __nonzero__(self): ...
    def __repr__(self: SBTypeCategory) -> str: ...
    def get_filters_access_object(self): ...
    def get_filters_array(self): ...
    def get_formats_access_object(self): ...
    def get_formats_array(self): ...
    def get_summaries_access_object(self): ...
    def get_summaries_array(self): ...
    def get_synthetics_access_object(self): ...
    def get_synthetics_array(self): ...
    @property
    def enabled(self) -> bool: ...
    @enabled.setter
    def enabled(self, value:bool): ...
    @property
    def filter(self): ...
    @property
    def filters(self): ...
    @property
    def format(self): ...
    @property
    def formats(self): ...
    @property
    def name(self) -> str: ...
    @property
    def num_filters(self) -> int: ...
    @property
    def num_formats(self) -> int: ...
    @property
    def num_summaries(self) -> int: ...
    @property
    def num_synthetics(self) -> int: ...
    @property
    def summaries(self): ...
    @property
    def summary(self): ...
    @property
    def synthetic(self): ...
    @property
    def synthetics(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBTypeEnumMember(object):
    def GetDescription(self: SBTypeEnumMember, description: SBStream, description_level: int) -> bool: ...
    def GetName(self: SBTypeEnumMember) -> str: ...
    def GetType(self: SBTypeEnumMember) -> SBType: ...
    def GetValueAsSigned(self: SBTypeEnumMember) -> int: ...
    def GetValueAsUnsigned(self: SBTypeEnumMember) -> int: ...
    def IsValid(self: SBTypeEnumMember) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBTypeEnumMember: ...
    def __nonzero__(self): ...
    def __repr__(self: SBTypeEnumMember) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def signed(self) -> int: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def type(self) -> SBType: ...
    @property
    def unsigned(self) -> int: ...

class SBTypeEnumMemberList(object):
    def Append(self: SBTypeEnumMemberList, entry: SBTypeEnumMember): ...
    def GetSize(self: SBTypeEnumMemberList) -> int: ...
    def GetTypeEnumMemberAtIndex(self: SBTypeEnumMemberList, index: int) -> SBTypeEnumMember: ...
    def IsValid(self: SBTypeEnumMemberList) -> bool: ...
    def __bool__(self): ...
    def __getitem__(self, key): ...
    def __init__(self, *args) -> SBTypeEnumMemberList: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBTypeFilter(object):
    def AppendExpressionPath(self: SBTypeFilter, item: str): ...
    def Clear(self: SBTypeFilter): ...
    def GetDescription(self: SBTypeFilter, description: SBStream, description_level: int) -> bool: ...
    def GetExpressionPathAtIndex(self: SBTypeFilter, i: int) -> str: ...
    def GetNumberOfExpressionPaths(self: SBTypeFilter) -> int: ...
    def GetOptions(self: SBTypeFilter) -> int: ...
    def IsEqualTo(self: SBTypeFilter, rhs: SBTypeFilter) -> bool: ...
    def IsValid(self: SBTypeFilter) -> bool: ...
    def ReplaceExpressionPathAtIndex(self: SBTypeFilter, i: int, item: str) -> bool: ...
    def SetOptions(self: SBTypeFilter, arg2: int): ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBTypeFilter: ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBTypeFilter) -> str: ...
    @property
    def count(self) -> int: ...
    @property
    def options(self) -> int: ...
    @options.setter
    def options(self, value:int): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBTypeFormat(object):
    def GetDescription(self: SBTypeFormat, description: SBStream, description_level: int) -> bool: ...
    def GetFormat(self: SBTypeFormat) -> int: ...
    def GetOptions(self: SBTypeFormat) -> int: ...
    def GetTypeName(self: SBTypeFormat) -> str: ...
    def IsEqualTo(self: SBTypeFormat, rhs: SBTypeFormat) -> bool: ...
    def IsValid(self: SBTypeFormat) -> bool: ...
    def SetFormat(self: SBTypeFormat, arg2: int): ...
    def SetOptions(self: SBTypeFormat, arg2: int): ...
    def SetTypeName(self: SBTypeFormat, arg2: str): ...
    def __bool__(self): ...
    def __eq__(self: SBTypeFormat, rhs: SBTypeFormat) -> bool: ...
    def __init__(self, *args) -> SBTypeFormat: ...
    def __ne__(self: SBTypeFormat, rhs: SBTypeFormat) -> bool: ...
    def __nonzero__(self): ...
    def __repr__(self: SBTypeFormat) -> str: ...
    @property
    def format(self) -> int: ...
    @format.setter
    def format(self, value:int): ...
    @property
    def options(self) -> int: ...
    @options.setter
    def options(self, value:int): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBTypeList(object):
    def Append(self: SBTypeList, type: SBType): ...
    def GetSize(self: SBTypeList) -> int: ...
    def GetTypeAtIndex(self: SBTypeList, index: int) -> SBType: ...
    def IsValid(self: SBTypeList) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBTypeList: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBTypeMember(object):
    def GetBitfieldSizeInBits(self: SBTypeMember) -> int: ...
    def GetDescription(self: SBTypeMember, description: SBStream, description_level: int) -> bool: ...
    def GetName(self: SBTypeMember) -> str: ...
    def GetOffsetInBits(self: SBTypeMember) -> int: ...
    def GetOffsetInBytes(self: SBTypeMember) -> int: ...
    def GetType(self: SBTypeMember) -> SBType: ...
    def IsBitfield(self: SBTypeMember) -> bool: ...
    def IsValid(self: SBTypeMember) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBTypeMember: ...
    def __nonzero__(self): ...
    def __repr__(self: SBTypeMember) -> str: ...
    @property
    def bit_offset(self) -> int: ...
    @property
    def bitfield_bit_size(self) -> int: ...
    @property
    def byte_offset(self) -> int: ...
    @property
    def is_bitfield(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def type(self) -> SBType: ...

class SBTypeMemberFunction(object):
    def GetArgumentTypeAtIndex(self: SBTypeMemberFunction, arg2: int) -> SBType: ...
    def GetDemangledName(self: SBTypeMemberFunction) -> str: ...
    def GetDescription(self: SBTypeMemberFunction, description: SBStream, description_level: int) -> bool: ...
    def GetKind(self: SBTypeMemberFunction) -> int: ...
    def GetMangledName(self: SBTypeMemberFunction) -> str: ...
    def GetName(self: SBTypeMemberFunction) -> str: ...
    def GetNumberOfArguments(self: SBTypeMemberFunction) -> int: ...
    def GetReturnType(self: SBTypeMemberFunction) -> SBType: ...
    def GetType(self: SBTypeMemberFunction) -> SBType: ...
    def IsValid(self: SBTypeMemberFunction) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBTypeMemberFunction: ...
    def __nonzero__(self): ...
    def __repr__(self: SBTypeMemberFunction) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBTypeNameSpecifier(object):
    def GetDescription(self: SBTypeNameSpecifier, description: SBStream, description_level: int) -> bool: ...
    def GetMatchType(self: SBTypeNameSpecifier) -> int: ...
    def GetName(self: SBTypeNameSpecifier) -> str: ...
    def GetType(self: SBTypeNameSpecifier) -> SBType: ...
    def IsEqualTo(self: SBTypeNameSpecifier, rhs: SBTypeNameSpecifier) -> bool: ...
    def IsRegex(self: SBTypeNameSpecifier) -> bool: ...
    def IsValid(self: SBTypeNameSpecifier) -> bool: ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBTypeNameSpecifier: ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBTypeNameSpecifier) -> str: ...
    @property
    def is_regex(self) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBTypeSummary(object):
    @staticmethod
    def CreateWithFunctionName(data: str, options: int = 0) -> SBTypeSummary: ...
    @staticmethod
    def CreateWithScriptCode(data: str, options: int = 0) -> SBTypeSummary: ...
    @staticmethod
    def CreateWithSummaryString(data: str, options: int = 0) -> SBTypeSummary: ...
    def DoesPrintValue(self: SBTypeSummary, value: SBValue) -> bool: ...
    def GetData(self: SBTypeSummary) -> str: ...
    def GetDescription(self: SBTypeSummary, description: SBStream, description_level: int) -> bool: ...
    def GetOptions(self: SBTypeSummary) -> int: ...
    def IsEqualTo(self: SBTypeSummary, rhs: SBTypeSummary) -> bool: ...
    def IsFunctionCode(self: SBTypeSummary) -> bool: ...
    def IsFunctionName(self: SBTypeSummary) -> bool: ...
    def IsSummaryString(self: SBTypeSummary) -> bool: ...
    def IsValid(self: SBTypeSummary) -> bool: ...
    def SetFunctionCode(self: SBTypeSummary, data: str): ...
    def SetFunctionName(self: SBTypeSummary, data: str): ...
    def SetOptions(self: SBTypeSummary, arg2: int): ...
    def SetSummaryString(self: SBTypeSummary, data: str): ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBTypeSummary: ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBTypeSummary) -> str: ...
    @property
    def is_function_name(self) -> bool: ...
    @property
    def is_summary_string(self) -> bool: ...
    @property
    def options(self) -> int: ...
    @options.setter
    def options(self, value:int): ...
    @property
    def summary_data(self) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBTypeSummaryOptions(object):
    def GetCapping(self: SBTypeSummaryOptions) -> int: ...
    def GetLanguage(self: SBTypeSummaryOptions) -> int: ...
    def IsValid(self: SBTypeSummaryOptions) -> bool: ...
    def SetCapping(self: SBTypeSummaryOptions, arg2: int): ...
    def SetLanguage(self: SBTypeSummaryOptions, arg2: int): ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBTypeSummaryOptions: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBTypeSynthetic(object):
    @staticmethod
    def CreateWithClassName(data: str, options: int = 0) -> SBTypeSynthetic: ...
    @staticmethod
    def CreateWithScriptCode(data: str, options: int = 0) -> SBTypeSynthetic: ...
    def GetData(self: SBTypeSynthetic) -> str: ...
    def GetDescription(self: SBTypeSynthetic, description: SBStream, description_level: int) -> bool: ...
    def GetOptions(self: SBTypeSynthetic) -> int: ...
    def IsClassCode(self: SBTypeSynthetic) -> bool: ...
    def IsClassName(self: SBTypeSynthetic) -> bool: ...
    def IsEqualTo(self: SBTypeSynthetic, rhs: SBTypeSynthetic) -> bool: ...
    def IsValid(self: SBTypeSynthetic) -> bool: ...
    def SetClassCode(self: SBTypeSynthetic, data: str): ...
    def SetClassName(self: SBTypeSynthetic, data: str): ...
    def SetOptions(self: SBTypeSynthetic, arg2: int): ...
    def __bool__(self): ...
    def __eq__(self, rhs): ...
    def __init__(self, *args) -> SBTypeSynthetic: ...
    def __ne__(self, rhs): ...
    def __nonzero__(self): ...
    def __repr__(self: SBTypeSynthetic) -> str: ...
    @property
    def contains_code(self) -> bool: ...
    @property
    def options(self) -> int: ...
    @options.setter
    def options(self, value:int): ...
    @property
    def synthetic_data(self) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBUnixSignals(object):
    def Clear(self: SBUnixSignals): ...
    def GetNumSignals(self: SBUnixSignals) -> int: ...
    def GetShouldNotify(self: SBUnixSignals, signo: int) -> bool: ...
    def GetShouldStop(self: SBUnixSignals, signo: int) -> bool: ...
    def GetShouldSuppress(self: SBUnixSignals, signo: int) -> bool: ...
    def GetSignalAsCString(self: SBUnixSignals, signo: int) -> str: ...
    def GetSignalAtIndex(self: SBUnixSignals, index: int) -> int: ...
    def GetSignalNumberFromName(self: SBUnixSignals, name: str) -> int: ...
    def IsValid(self: SBUnixSignals) -> bool: ...
    def SetShouldNotify(self: SBUnixSignals, signo: int, value: bool) -> bool: ...
    def SetShouldStop(self: SBUnixSignals, signo: int, value: bool) -> bool: ...
    def SetShouldSuppress(self: SBUnixSignals, signo: int, value: bool) -> bool: ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBUnixSignals: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    def get_unix_signals_list(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def threads(self): ...

class SBValue(object):
    class children_access(object):
        def __getitem__(self, key): ...
        def __init__(self, sbvalue): ...
        def __len__(self): ...
    def AddressOf(self: SBValue) -> SBValue: ...
    def Cast(self: SBValue, type: SBType) -> SBValue: ...
    def Clear(self: SBValue): ...
    def Clone(self: SBValue, new_name: str) -> SBValue: ...
    def CreateChildAtOffset(self: SBValue, name: str, offset: int, type: SBType) -> SBValue: ...
    def CreateValueFromAddress(self: SBValue, name: str, address: int, type: SBType) -> SBValue: ...
    def CreateValueFromData(self: SBValue, name: str, data: SBData, type: SBType) -> SBValue: ...
    def CreateValueFromExpression(self, *args) -> SBValue: ...
    def Dereference(self: SBValue) -> SBValue: ...
    def EvaluateExpression(self, *args) -> SBValue: ...
    def GetAddress(self: SBValue) -> SBAddress: ...
    def GetByteSize(self: SBValue) -> int: ...
    def GetChildAtIndex(self, *args) -> SBValue: ...
    def GetChildMemberWithName(self, *args) -> SBValue: ...
    def GetData(self: SBValue) -> SBData: ...
    def GetDeclaration(self: SBValue) -> SBDeclaration: ...
    def GetDescription(self: SBValue, description: SBStream) -> bool: ...
    def GetDisplayTypeName(self: SBValue) -> str: ...
    def GetDynamicValue(self: SBValue, use_dynamic: int) -> SBValue: ...
    def GetError(self: SBValue) -> SBError: ...
    def GetExpressionPath(self, *args) -> bool: ...
    def GetFormat(self: SBValue) -> int: ...
    def GetFrame(self: SBValue) -> SBFrame: ...
    def GetID(self: SBValue) -> int: ...
    def GetIndexOfChildWithName(self: SBValue, name: str) -> int: ...
    def GetLoadAddress(self: SBValue) -> int: ...
    def GetLocation(self: SBValue) -> str: ...
    def GetName(self: SBValue) -> str: ...
    def GetNonSyntheticValue(self: SBValue) -> SBValue: ...
    def GetNumChildren(self, *args) -> int: ...
    def GetObjectDescription(self: SBValue) -> str: ...
    def GetOpaqueType(self: SBValue) -> bytes: ...
    def GetPointeeData(self: SBValue, item_idx: int = 0, item_count: int = 1) -> SBData: ...
    def GetPreferDynamicValue(self: SBValue) -> int: ...
    def GetPreferSyntheticValue(self: SBValue) -> bool: ...
    def GetProcess(self: SBValue) -> SBProcess: ...
    def GetStaticValue(self: SBValue) -> SBValue: ...
    def GetSummary(self, *args) -> str: ...
    def GetTarget(self: SBValue) -> SBTarget: ...
    def GetThread(self: SBValue) -> SBThread: ...
    def GetType(self: SBValue) -> SBType: ...
    def GetTypeFilter(self: SBValue) -> SBTypeFilter: ...
    def GetTypeFormat(self: SBValue) -> SBTypeFormat: ...
    def GetTypeName(self: SBValue) -> str: ...
    def GetTypeSummary(self: SBValue) -> SBTypeSummary: ...
    def GetTypeSynthetic(self: SBValue) -> SBTypeSynthetic: ...
    def GetValue(self: SBValue) -> str: ...
    def GetValueAsSigned(self, *args) -> int: ...
    def GetValueAsUnsigned(self, *args) -> int: ...
    def GetValueDidChange(self: SBValue) -> bool: ...
    def GetValueForExpressionPath(self: SBValue, expr_path: str) -> SBValue: ...
    def GetValueType(self: SBValue) -> int: ...
    def IsDynamic(self: SBValue) -> bool: ...
    def IsInScope(self: SBValue) -> bool: ...
    def IsRuntimeSupportValue(self: SBValue) -> bool: ...
    def IsSynthetic(self: SBValue) -> bool: ...
    def IsSyntheticChildrenGenerated(self: SBValue) -> bool: ...
    def IsValid(self: SBValue) -> bool: ...
    def MightHaveChildren(self: SBValue) -> bool: ...
    def Persist(self: SBValue) -> SBValue: ...
    def SetData(self: SBValue, data: SBData, error: SBError) -> bool: ...
    def SetFormat(self: SBValue, format: int): ...
    def SetPreferDynamicValue(self: SBValue, use_dynamic: int): ...
    def SetPreferSyntheticValue(self: SBValue, use_synthetic: bool): ...
    def SetSyntheticChildrenGenerated(self: SBValue, arg2: bool): ...
    def SetValueFromCString(self, *args) -> bool: ...
    def TypeIsPointerType(self: SBValue) -> bool: ...
    def Watch(self, *args) -> SBWatchpoint: ...
    def WatchPointee(self: SBValue, resolve_location: bool, read: bool, write: bool, error: SBError) -> SBWatchpoint: ...
    def _SBValue__eol_test(val): ...
    def __bool__(self): ...
    def __get_dynamic__(self): ...
    def __init__(self, *args) -> SBValue: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __nonzero__(self): ...
    def __repr__(self: SBValue) -> str: ...
    def get_child_access_object(self): ...
    def get_expr_path(self): ...
    def get_value_child_list(self): ...
    def linked_list_iter(self, next_item_name, end_of_list_test): ...
    def synthetic_child_from_address(self, name, addr, type): ...
    def synthetic_child_from_data(self, name, data, type): ...
    def synthetic_child_from_expression(self, name, expr, options): ...
    @property
    def addr(self) -> SBAddress: ...
    @property
    def address_of(self) -> SBValue: ...
    @property
    def changed(self) -> bool: ...
    @property
    def child(self): ...
    @property
    def children(self): ...
    @property
    def data(self) -> SBData: ...
    @property
    def deref(self) -> SBValue: ...
    @property
    def description(self) -> str: ...
    @property
    def dynamic(self): ...
    @property
    def error(self) -> SBError: ...
    @property
    def format(self) -> str: ...
    @format.setter
    def format(self, value:str): ...
    @property
    def frame(self) -> SBFrame: ...
    @property
    def is_in_scope(self) -> bool: ...
    @property
    def load_addr(self) -> int: ...
    @property
    def location(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def num_children(self) -> int: ...
    @property
    def path(self): ...
    @property
    def process(self) -> SBProcess: ...
    @property
    def signed(self) -> int: ...
    @property
    def size(self) -> int: ...
    @property
    def summary(self) -> int: ...
    @property
    def target(self) -> SBTarget: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...
    @property
    def thread(self) -> SBThread: ...
    @property
    def type(self) -> SBType: ...
    @property
    def unsigned(self) -> int: ...
    @property
    def value(self) -> str: ...
    @value.setter
    def value(self, value:str): ...
    @property
    def value_type(self) -> int: ...

class SBValueList(object):
    def Append(self, *args): ...
    def Clear(self: SBValueList): ...
    def FindValueObjectByUID(self: SBValueList, uid: int) -> SBValue: ...
    def GetError(self: SBValueList) -> SBError: ...
    def GetFirstValueByName(self: SBValueList, name: str) -> SBValue: ...
    def GetSize(self: SBValueList) -> int: ...
    def GetValueAtIndex(self: SBValueList, idx: int) -> SBValue: ...
    def IsValid(self: SBValueList) -> bool: ...
    def __bool__(self): ...
    def __getitem__(self, key): ...
    def __init__(self, *args) -> SBValueList: ...
    def __iter__(self): ...
    def __len__(self): ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    def __str__(self: SBValueList) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBVariablesOptions(object):
    def GetInScopeOnly(self: SBVariablesOptions) -> bool: ...
    def GetIncludeArguments(self: SBVariablesOptions) -> bool: ...
    def GetIncludeLocals(self: SBVariablesOptions) -> bool: ...
    def GetIncludeRecognizedArguments(self: SBVariablesOptions, arg2: SBTarget) -> bool: ...
    def GetIncludeRuntimeSupportValues(self: SBVariablesOptions) -> bool: ...
    def GetIncludeStatics(self: SBVariablesOptions) -> bool: ...
    def GetUseDynamic(self: SBVariablesOptions) -> int: ...
    def IsValid(self: SBVariablesOptions) -> bool: ...
    def SetInScopeOnly(self: SBVariablesOptions, arg2: bool): ...
    def SetIncludeArguments(self: SBVariablesOptions, arg2: bool): ...
    def SetIncludeLocals(self: SBVariablesOptions, arg2: bool): ...
    def SetIncludeRecognizedArguments(self: SBVariablesOptions, arg2: bool): ...
    def SetIncludeRuntimeSupportValues(self: SBVariablesOptions, arg2: bool): ...
    def SetIncludeStatics(self: SBVariablesOptions, arg2: bool): ...
    def SetUseDynamic(self: SBVariablesOptions, arg2: int): ...
    def __bool__(self): ...
    def __init__(self, *args) -> SBVariablesOptions: ...
    def __nonzero__(self): ...
    def __repr__(self): ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class SBWatchpoint(object):
    def Clear(self: SBWatchpoint): ...
    @staticmethod
    def EventIsWatchpointEvent(event: SBEvent) -> bool: ...
    def GetCondition(self: SBWatchpoint) -> str: ...
    def GetDescription(self: SBWatchpoint, description: SBStream, level: int) -> bool: ...
    def GetError(self: SBWatchpoint) -> SBError: ...
    def GetHardwareIndex(self: SBWatchpoint) -> int: ...
    def GetHitCount(self: SBWatchpoint) -> int: ...
    def GetID(self: SBWatchpoint) -> int: ...
    def GetIgnoreCount(self: SBWatchpoint) -> int: ...
    def GetType(self: SBWatchpoint) -> SBType: ...
    def GetWatchAddress(self: SBWatchpoint) -> int: ...
    def GetWatchSize(self: SBWatchpoint) -> int: ...
    def GetWatchSpec(self: SBWatchpoint) -> str: ...
    def GetWatchValueKind(self: SBWatchpoint) -> int: ...
    @staticmethod
    def GetWatchpointEventTypeFromEvent(event: SBEvent) -> int: ...
    @staticmethod
    def GetWatchpointFromEvent(event: SBEvent) -> SBWatchpoint: ...
    def IsEnabled(self: SBWatchpoint) -> bool: ...
    def IsValid(self: SBWatchpoint) -> bool: ...
    def IsWatchingReads(self: SBWatchpoint) -> bool: ...
    def IsWatchingWrites(self: SBWatchpoint) -> bool: ...
    def SetCondition(self: SBWatchpoint, condition: str): ...
    def SetEnabled(self: SBWatchpoint, enabled: bool): ...
    def SetIgnoreCount(self: SBWatchpoint, n: int): ...
    def __bool__(self): ...
    def __eq__(self: SBWatchpoint, rhs: SBWatchpoint) -> bool: ...
    def __init__(self, *args) -> SBWatchpoint: ...
    def __ne__(self: SBWatchpoint, rhs: SBWatchpoint) -> bool: ...
    def __nonzero__(self): ...
    def __repr__(self: SBWatchpoint) -> str: ...
    @property
    def thisown(self): ...
    @thisown.setter
    def thisown(self, value): ...

class _SwigNonDynamicMeta(type):
    def __setattr__(cls, name, value): ...

class declaration(object):
    def __init__(self, file, line, col): ...

class value(object):
    def __abs__(self): ...
    def __add__(self, other): ...
    def __and__(self, other): ...
    def __bool__(self): ...
    def __complex__(self): ...
    def __div__(self, other): ...
    def __divmod__(self, other): ...
    def __eq__(self, other): ...
    def __float__(self): ...
    def __floordiv__(self, other): ...
    def __getattr__(self, name): ...
    def __getitem__(self, key): ...
    def __hex__(self): ...
    def __iadd__(self, other): ...
    def __iand__(self, other): ...
    def __idiv__(self, other): ...
    def __ifloordiv__(self, other): ...
    def __ilshift__(self, other): ...
    def __imod__(self, other): ...
    def __imul__(self, other): ...
    def __init__(self, sbvalue): ...
    def __int__(self): ...
    def __invert__(self): ...
    def __ior__(self, other): ...
    def __ipow__(self, other, modulo): ...
    def __irshift__(self, other): ...
    def __isub__(self, other): ...
    def __iter__(self): ...
    def __itruediv__(self, other): ...
    def __ixor__(self, other): ...
    def __len__(self): ...
    def __long__(self): ...
    def __lshift__(self, other): ...
    def __mod__(self, other): ...
    def __mul__(self, other): ...
    def __ne__(self, other): ...
    def __neg__(self): ...
    def __nonzero__(self): ...
    def __oct__(self): ...
    def __or__(self, other): ...
    def __pos__(self): ...
    def __pow__(self, other): ...
    def __rshift__(self, other): ...
    def __str__(self): ...
    def __sub__(self, other): ...
    def __truediv__(self, other): ...
    def __xor__(self, other): ...

class value_iter(object):
    def __init__(self, value): ...
    def __iter__(self): ...
    def __next__(self): ...
    def next(self): ...

